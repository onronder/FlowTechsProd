
=== ./middleware.ts ===
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const token = request.cookies.get('auth_token')?.value

  // Check if the user is trying to access API routes
  if (request.nextUrl.pathname.startsWith('/api/')) {
    if (!token) {
      return new NextResponse(
        JSON.stringify({ error: 'Authentication required' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      )
    }
    // In a real application, you would validate the token here
  }

  // For non-API routes, redirect to login if not authenticated
  if (!token && !request.nextUrl.pathname.startsWith('/login')) {
    return NextResponse.redirect(new URL('/login', request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}


=== ./tailwind.config.js ===
const { fontFamily } = require("tailwindcss/defaultTheme")

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: ["app/**/*.{ts,tsx}", "components/**/*.{ts,tsx}"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["Inter", ...fontFamily.sans],
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}


=== ./app/settings/page.tsx ===
import { SettingsForm } from '@/components/settings/settings-form'
import { UserProfile } from '@/components/settings/user-profile'
import { InfoTooltip } from '@/components/ui/info-tooltip'

export default function SettingsPage() {
  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The Settings page enables you to manage your user profile and application preferences."
        pageIdentifier="settings"
      />
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Settings</h1>
      <div className="grid gap-6 md:grid-cols-2">
        <UserProfile />
        <SettingsForm />
      </div>
    </div>
  )
}


=== ./app/data-storage/layout.tsx ===
import { ReactNode } from 'react'

export default function DataStorageLayout({ children }: { children: ReactNode }) {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Data Storage</h1>
      {children}
    </div>
  )
}


=== ./app/data-storage/page.tsx ===
import { DataStorageContent } from '@/components/data-storage/data-storage-content'
import { InfoTooltip } from '@/components/ui/info-tooltip'

export default function DataStoragePage() {
  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The Data Storage page allows you to view and download your stored data files."
        pageIdentifier="data-storage"
      />
      <DataStorageContent />
    </div>
  )
}


=== ./app/ai-insights/page.tsx ===
import { Metadata } from 'next'
import { AIInsightsContent } from '@/components/ai-insights/ai-insights-content'
import { InfoTooltip } from '@/components/ui/info-tooltip'

export const metadata: Metadata = {
  title: 'AI Insights',
  description: 'Analyze your Shopify data using AI',
}

export default function AIInsightsPage() {
  return (
    <div className="space-y-6 bg-white dark:bg-[#1E1E2D] min-h-screen p-8 font-poppins">
      <InfoTooltip
        message="The AI Insights page helps you upload and analyze your Shopify data to find trends, correlations, and actionable insights using AI."
        pageIdentifier="ai-insights"
      />
      <AIInsightsContent />
    </div>
  )
}


=== ./app/transformations/page.tsx ===
"use client"

import { useState } from 'react'
import { TransformationsHeader } from '@/components/transformations/transformations-header'
import { TransformationsList } from '@/components/transformations/transformations-list'
import { InfoTooltip } from '@/components/ui/info-tooltip'
import { useTheme } from '@/components/theme-provider'
import { AddTransformationModal } from '@/components/transformations/add-transformation-modal'

export default function TransformationsPage() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'
  const [isModalOpen, setIsModalOpen] = useState(false)

  const handleAddNew = () => {
    setIsModalOpen(true)
  }

  const handleClose = () => {
    setIsModalOpen(false)
  }

  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The Transformation page enables you to configure and apply data transformations, including derived columns and custom calculations, ensuring your data is optimized for your specific needs."
        pageIdentifier="transformations"
      />
      <TransformationsHeader onAddNew={handleAddNew} />
      <TransformationsList isDarkMode={isDarkMode} />
      <AddTransformationModal isOpen={isModalOpen} onClose={handleClose} />
    </div>
  )
}


=== ./app/destinations/page.tsx ===
"use client"

import { useState } from 'react'
import { InfoTooltip } from '@/components/ui/info-tooltip'
import { DestinationCard } from '@/components/destinations/destination-card'
import { AddDestinationModal } from '@/components/destinations/add-destination-modal'
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { useTheme } from 'next-themes'

// Mock data for destinations
const initialDestinations = [
  { id: 1, name: 'FTP Server', type: 'FTP/SFTP', isConnected: true },
  { id: 2, name: 'Google Drive Backup', type: 'Google Drive', isConnected: false },
  { id: 3, name: 'OneDrive Sync', type: 'Microsoft OneDrive', isConnected: true },
]

export default function DestinationsPage() {
  const [destinations, setDestinations] = useState(initialDestinations)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [editingDestination, setEditingDestination] = useState<any>(null)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleAddNew = () => {
    setEditingDestination(null)
    setIsModalOpen(true)
  }

  const handleEdit = (destination: any) => {
    setEditingDestination(destination)
    setIsModalOpen(true)
  }

  const handleDelete = (id: number) => {
    setDestinations(destinations.filter(dest => dest.id !== id))
  }

  const handleToggleConnection = (id: number) => {
    setDestinations(destinations.map(dest => 
      dest.id === id ? { ...dest, isConnected: !dest.isConnected } : dest
    ))
  }

  const handleSave = (newDestination: any) => {
    if (editingDestination) {
      setDestinations(destinations.map(dest => 
        dest.id === editingDestination.id ? { ...dest, ...newDestination } : dest
      ))
    } else {
      setDestinations([...destinations, { ...newDestination, id: destinations.length + 1 }])
    }
    setIsModalOpen(false)
  }

  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The My Destinations page allows you to configure and manage where processed data will be sent, ensuring seamless integration with target systems or platforms."
        pageIdentifier="destinations"
      />
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">My Destinations</h1>
        <Button onClick={handleAddNew} className={`${
          isDarkMode
            ? 'bg-[#2196F3] text-white hover:bg-[#1E88E5]'
            : 'bg-[#1565C0] text-white hover:bg-[#0D47A1]'
        }`}>
          <Plus className="mr-2 h-4 w-4" /> Add New Destination
        </Button>
      </div>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {destinations.map((destination) => (
          <DestinationCard
            key={destination.id}
            destination={destination}
            onEdit={() => handleEdit(destination)}
            onDelete={() => handleDelete(destination.id)}
            onToggleConnection={() => handleToggleConnection(destination.id)}
            isDarkMode={isDarkMode}
          />
        ))}
      </div>
      <AddDestinationModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSave={handleSave}
        editingDestination={editingDestination}
      />
    </div>
  )
}


=== ./app/dashboard/page.tsx ===
import { DataChart } from '@/components/dashboard/data-chart'

export default function DashboardPage() {
  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Dashboard</h1>
      <DataChart />
    </div>
  )
}


=== ./app/layout.tsx ===
import "@/app/globals.css"
import { Inter } from "next/font/google"
import { cn } from "@/lib/utils"
import { ThemeProvider } from "@/components/theme-provider"
import { ExpandedSidebar } from '@/components/expanded-sidebar'
import { HeaderBar } from '@/components/header-bar'
import ErrorBoundary from '@/components/error-boundary'

const inter = Inter({ subsets: ["latin"] })

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning className={cn("min-h-screen bg-background font-sans antialiased", inter.className)}>
      <body>
        <ThemeProvider attribute="class" defaultTheme="light" enableSystem>
          <div className="flex h-screen bg-background">
            <ExpandedSidebar />
            <div className="flex-1 flex flex-col">
              <HeaderBar />
              <main className="flex-1 p-8 overflow-auto">
                <ErrorBoundary>
                  {children}
                </ErrorBoundary>
              </main>
            </div>
          </div>
        </ThemeProvider>
      </body>
    </html>
  )
}


=== ./app/sources/page.tsx ===
"use client"

import { useState } from 'react'
import { ConnectionCard } from '@/components/sources/connection-card'
import { AddSourceButton } from '@/components/sources/add-source-button'
import { InfoTooltip } from '@/components/ui/info-tooltip'
import { useTheme } from '@/components/theme-provider'
import { AddSourceModal } from '@/components/sources/add-source-modal'

// Mock data for connections
const initialConnections = [
  { id: 1, storeName: "Fashion Boutique", status: "Active" as const, url: "https://fashion-boutique.myshopify.com", apiKey: "key1", apiSecret: "secret1" },
  { id: 2, storeName: "Tech Gadgets", status: "Inactive" as const, url: "https://tech-gadgets.myshopify.com", apiKey: "key2", apiSecret: "secret2" },
  { id: 3, storeName: "Home Decor", status: "Active" as const, url: "https://home-decor.myshopify.com", apiKey: "key3", apiSecret: "secret3" },
]

export default function SourcesPage() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'
  const [connections, setConnections] = useState(initialConnections)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [editingSource, setEditingSource] = useState<any>(null)

  const handleAddNew = () => {
    setEditingSource(null)
    setIsModalOpen(true)
  }

  const handleEdit = (connection: any) => {
    setEditingSource(connection)
    setIsModalOpen(true)
  }

  const handleSave = (newConnection: any) => {
    if (editingSource) {
      setConnections(connections.map(conn => 
        conn.id === editingSource.id ? { ...conn, ...newConnection } : conn
      ))
    } else {
      setConnections([...connections, { ...newConnection, id: connections.length + 1 }])
    }
    setIsModalOpen(false)
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <InfoTooltip
        message="⚠️ The My Sources page allows you to connect and manage your data sources, such as Shopify or other platforms, ensuring seamless integration for data extraction and processing."
        pageIdentifier="sources"
      />
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">My Sources</h1>
        <AddSourceButton onClick={handleAddNew} />
      </div>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {connections.map((connection) => (
          <ConnectionCard key={connection.id} {...connection} onEdit={() => handleEdit(connection)} isDarkMode={isDarkMode} />
        ))}
      </div>
      <AddSourceModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSave={handleSave}
        editingSource={editingSource}
      />
    </div>
  )
}


=== ./app/api/transformations/route.ts ===
import { NextResponse } from 'next/server'

const transformations = [
  { id: 1, name: 'Order Data Cleanup', sourceId: 1, destinationId: 1, lastRun: '2023-11-22T10:30:00Z' },
  { id: 2, name: 'User Analytics Processing', sourceId: 2, destinationId: 2, lastRun: '2023-11-22T11:30:00Z' },
]

export async function GET() {
  return NextResponse.json(transformations)
}

export async function POST(request: Request) {
  const body = await request.json()
  const newTransformation = {
    id: transformations.length + 1,
    ...body,
    lastRun: new Date().toISOString()
  }
  transformations.push(newTransformation)
  return NextResponse.json(newTransformation, { status: 201 })
}


=== ./app/api/destinations/route.ts ===
import { NextResponse } from 'next/server'

const destinations = [
  { id: 1, name: 'Data Warehouse', type: 'database', lastUpdate: '2023-11-22T12:00:00Z' },
  { id: 2, name: 'Business Intelligence Tool', type: 'api', lastUpdate: '2023-11-22T13:00:00Z' },
]

export async function GET() {
  return NextResponse.json(destinations)
}

export async function POST(request: Request) {
  const body = await request.json()
  const newDestination = {
    id: destinations.length + 1,
    ...body,
    lastUpdate: new Date().toISOString()
  }
  destinations.push(newDestination)
  return NextResponse.json(newDestination, { status: 201 })
}


=== ./app/api/dashboard/route.ts ===
import { NextResponse } from 'next/server'

export async function GET() {
  try {
    // In a real application, you would fetch this data from a database
    const dashboardData = {
      totalUsers: 10234,
      eventCount: 536,
      conversations: 21,
      newUsers: 3321,
      recentJobs: [
        {
          source: 'Orders',
          date: '2018/12/12',
          lastRun: '2023/11/22',
          lastDate: '2023/11/22'
        }
      ],
      dataSizeByMonth: [
        { name: "Jan", total: 3000 },
        { name: "Feb", total: 3500 },
        { name: "Mar", total: 4000 },
        { name: "Apr", total: 3800 },
        { name: "May", total: 4200 },
        { name: "Jun", total: 4500 },
        { name: "Jul", total: 4800 },
        { name: "Aug", total: 5000 },
        { name: "Sep", total: 5200 },
        { name: "Oct", total: 5500 },
        { name: "Nov", total: 5800 },
        { name: "Dec", total: 6000 },
      ]
    }

    return NextResponse.json(dashboardData)
  } catch (error) {
    console.error('Error in dashboard API:', error)
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
  }
}


=== ./app/api/dashboard/data-size/route.ts ===
import { NextResponse } from 'next/server'

export async function GET() {
  // TODO: Implement actual data fetching logic
  const dataSizeData = [
    { month: "Jan", Shopify: 400, Amazon: 240 },
    { month: "Feb", Shopify: 300, Amazon: 139 },
    { month: "Mar", Shopify: 200, Amazon: 980 },
    { month: "Apr", Shopify: 278, Amazon: 390 },
    { month: "May", Shopify: 189, Amazon: 480 },
    { month: "Jun", Shopify: 239, Amazon: 380 },
    { month: "Jul", Shopify: 349, Amazon: 430 },
  ]

  return NextResponse.json(dataSizeData)
}


=== ./app/api/dashboard/overview/route.ts ===
import { NextResponse } from 'next/server'

export async function GET() {
  // TODO: Implement actual data fetching logic
  const overviewData = {
    lastTransferredOrderCount: 147,
    lastTransferredCustomerCount: 52,
    totalUploadTime: '00:04:53',
  }

  return NextResponse.json(overviewData)
}


=== ./app/api/dashboard/recent-jobs/route.ts ===
import { NextResponse } from 'next/server'

export async function GET() {
  // TODO: Implement actual data fetching logic
  const recentJobs = [
    { source: 'Shop', date: '2018/12/12', lastRun: '2023/11/22', lastDate: '2023/11/22' },
    { source: 'Orders', date: '2018/12/12', lastRun: '2023/11/22', lastDate: '2023/11/22' },
  ]

  return NextResponse.json(recentJobs)
}


=== ./app/api/sources/route.ts ===
import { NextResponse } from 'next/server'

const sources = [
  { id: 1, name: 'Shopify', type: 'ecommerce', lastSync: '2023-11-22T10:00:00Z' },
  { id: 2, name: 'Google Analytics', type: 'analytics', lastSync: '2023-11-22T11:00:00Z' },
]

export async function GET() {
  return NextResponse.json(sources)
}

export async function POST(request: Request) {
  const body = await request.json()
  const newSource = {
    id: sources.length + 1,
    ...body,
    lastSync: new Date().toISOString()
  }
  sources.push(newSource)
  return NextResponse.json(newSource, { status: 201 })
}


=== ./app/jobs/page.tsx ===
"use client"

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { useTheme } from 'next-themes'
import { InfoTooltip } from '@/components/ui/info-tooltip'
import { RecentJobs } from '@/components/jobs/recent-jobs'
import { AddJobModal } from '@/components/jobs/add-job-modal'

export default function JobsPage() {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleAddNew = () => {
    setIsModalOpen(true)
  }

  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The Jobs page allows you to manage and monitor your data integration jobs, including creating new jobs and viewing recent job statuses."
        pageIdentifier="jobs"
      />
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Jobs</h1>
        <Button onClick={handleAddNew} className={`${
          isDarkMode
            ? 'bg-[#2196F3] text-white hover:bg-[#1E88E5]'
            : 'bg-[#1565C0] text-white hover:bg-[#0D47A1]'
        }`}>
          <Plus className="mr-2 h-4 w-4" /> Add New Job
        </Button>
      </div>
      <RecentJobs />
      <AddJobModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </div>
  )
}


=== ./app/(auth)/signup/page.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { AuthLayout } from '@/components/auth/auth-layout'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useTheme } from "@/components/theme-provider"
import { FcGoogle } from 'react-icons/fc'

export default function SignUpPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const router = useRouter()
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    if (!validateEmail(email)) {
      setError('Please enter a valid email address.')
      return
    }

    if (!validatePassword(password)) {
      setError('Password must be at least 8 characters long, contain one uppercase letter and one number.')
      return
    }

    try {
      const response = await fetch('/api/auth/sign-up', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      })

      const data = await response.json()

      if (data.success) {
        router.push('/login')
      } else {
        setError(data.message || 'An error occurred during sign up.')
      }
    } catch (err) {
      setError('An error occurred. Please try again.')
    }
  }

  const validateEmail = (email: string) => {
    return /\S+@\S+\.\S+/.test(email)
  }

  const validatePassword = (password: string) => {
    return password.length >= 8 && /[A-Z]/.test(password) && /\d/.test(password)
  }

  const handleGoogleSignUp = () => {
    // Implement Google OAuth2 sign up logic here
    console.log('Google sign up clicked')
  }

  return (
    <AuthLayout
      title="Create Your Account"
      subtitle="Sign up to start managing your data effortlessly."
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="email">Email Address</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className={isDarkMode ? 'bg-[#2C2C3D] border-[#4C4C5A] text-white' : 'bg-[#F5F5F5] border-[#E0E0E0] text-black'}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            placeholder="Create a password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className={isDarkMode ? 'bg-[#2C2C3D] border-[#4C4C5A] text-white' : 'bg-[#F5F5F5] border-[#E0E0E0] text-black'}
          />
        </div>
        {error && <p className="text-red-500 text-sm">{error}</p>}
        <Button
          type="submit"
          className={`w-full ${
            isDarkMode
              ? 'bg-gradient-to-r from-[#BB86FC] to-[#6200EE] hover:from-[#CC99FF] hover:to-[#7357EE]'
              : 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] hover:from-[#786EFF] hover:to-[#A673CC]'
          } text-white`}
        >
          Sign Up with Email
        </Button>
      </form>
      <div className="mt-4">
        <Button
          type="button"
          variant="outline"
          onClick={handleGoogleSignUp}
          className={`w-full ${
            isDarkMode ? 'bg-[#3A3A4B] text-white hover:bg-[#4C4C5A]' : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'
          }`}
        >
          <FcGoogle className="mr-2 h-4 w-4" />
          Sign Up with Google
        </Button>
      </div>
      <p className={`mt-4 text-center text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
        Already have an account?{' '}
        <Link href="/login" className={isDarkMode ? 'text-[#BBE1FA] hover:text-[#A0D1FF]' : 'text-[#1565C0] hover:text-[#0D47A1]'}>
          Login
        </Link>
      </p>
    </AuthLayout>
  )
}


=== ./app/(auth)/forgot-password/page.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { AuthLayout } from '@/components/auth/auth-layout'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useTheme } from "@/components/theme-provider"

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('')
  const [message, setMessage] = useState('')
  const [error, setError] = useState('')
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setMessage('')
    setError('')

    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email }),
      })

      const data = await response.json()

      if (data.success) {
        setMessage('Password reset link sent to your email.')
      } else {
        setError(data.message || 'Email not found in our records.')
      }
    } catch (err) {
      setError('An error occurred. Please try again.')
    }
  }

  return (
    <AuthLayout
      title="Forgot Password"
      subtitle="Enter your email to reset your password."
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="email">Email Address</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className={isDarkMode ? 'bg-[#2C2C3D] border-[#4C4C5A] text-white' : 'bg-[#F5F5F5] border-[#E0E0E0] text-black'}
          />
        </div>
        {error && <p className="text-red-500 text-sm">{error}</p>}
        {message && <p className="text-green-500 text-sm">{message}</p>}
        <Button
          type="submit"
          className={`w-full ${
            isDarkMode
              ? 'bg-gradient-to-r from-[#BB86FC] to-[#6200EE] hover:from-[#CC99FF] hover:to-[#7357EE]'
              : 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] hover:from-[#786EFF] hover:to-[#A673CC]'
          } text-white`}
        >
          Send Reset Link
        </Button>
      </form>
      <p className={`mt-4 text-center text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
        Remember your password?{' '}
        <Link href="/login" className={isDarkMode ? 'text-[#BBE1FA] hover:text-[#A0D1FF]' : 'text-[#1565C0] hover:text-[#0D47A1]'}>
          Login
        </Link>
      </p>
    </AuthLayout>
  )
}


=== ./app/(auth)/layout.tsx ===
import "@/app/globals.css"
import { Inter } from "next/font/google"
import { cn } from "@/lib/utils"
import { ThemeProvider } from "@/components/theme-provider"

const inter = Inter({ subsets: ["latin"] })

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={cn("min-h-screen bg-background font-sans antialiased", inter.className)}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}


=== ./app/(auth)/login/page.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { AuthLayout } from '@/components/auth/auth-layout'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useTheme } from "@/components/theme-provider"
import { FcGoogle } from 'react-icons/fc'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const router = useRouter()
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      })

      const data = await response.json()

      if (data.success) {
        // Store the token securely (e.g., in HttpOnly cookie)
        // Redirect to dashboard or home page
        router.push('/')
      } else {
        setError(data.message || 'Incorrect email or password.')
      }
    } catch (err) {
      setError('An error occurred. Please try again.')
    }
  }

  const handleGoogleLogin = () => {
    // Implement Google OAuth2 login logic here
    console.log('Google login clicked')
  }

  return (
    <AuthLayout
      title="Welcome Back"
      subtitle="Log in to your account."
    >
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="email">Email Address</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className={isDarkMode ? 'bg-[#2C2C3D] border-[#4C4C5A] text-white' : 'bg-[#F5F5F5] border-[#E0E0E0] text-black'}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className={isDarkMode ? 'bg-[#2C2C3D] border-[#4C4C5A] text-white' : 'bg-[#F5F5F5] border-[#E0E0E0] text-black'}
          />
        </div>
        {error && <p className="text-red-500 text-sm">{error}</p>}
        <Button
          type="submit"
          className={`w-full ${
            isDarkMode
              ? 'bg-gradient-to-r from-[#BB86FC] to-[#6200EE] hover:from-[#CC99FF] hover:to-[#7357EE]'
              : 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] hover:from-[#786EFF] hover:to-[#A673CC]'
          } text-white`}
        >
          Log In with Email
        </Button>
      </form>
      <div className="mt-4">
        <Button
          type="button"
          variant="outline"
          onClick={handleGoogleLogin}
          className={`w-full ${
            isDarkMode ? 'bg-[#3A3A4B] text-white hover:bg-[#4C4C5A]' : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'
          }`}
        >
          <FcGoogle className="mr-2 h-4 w-4" />
          Log In with Google
        </Button>
      </div>
      <div className="mt-4 text-center">
        <Link
          href="/forgot-password"
          className={`text-sm ${isDarkMode ? 'text-[#BBE1FA] hover:text-[#A0D1FF]' : 'text-[#1565C0] hover:text-[#0D47A1]'}`}
        >
          Forgot your password?
        </Link>
      </div>
      <p className={`mt-4 text-center text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
        Don't have an account?{' '}
        <Link href="/sign-up" className={isDarkMode ? 'text-[#BBE1FA] hover:text-[#A0D1FF]' : 'text-[#1565C0] hover:text-[#0D47A1]'}>
          Sign Up
        </Link>
      </p>
    </AuthLayout>
  )
}


=== ./app/page.tsx ===
import { MetricCards } from '@/components/dashboard/metric-cards'
import { RecentJobs } from '@/components/dashboard/recent-jobs'
import { InfoTooltip } from '@/components/ui/info-tooltip'

export default function DashboardPage() {
  return (
    <div className="space-y-8">
      <InfoTooltip
        message="⚠️ The Dashboard provides a centralized view of your data integration processes, offering key performance metrics, recent activity, and insights to help you monitor and manage your workflows effectively."
        pageIdentifier="dashboard"
      />
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Dashboard</h1>
      </div>
      <div className="grid gap-8">
        <MetricCards />
        <RecentJobs />
      </div>
    </div>
  )
}


=== ./app/globals.css ===
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;

    --ring: 217.2 32.6% 17.5%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

.font-poppins {
  font-family: 'Poppins', sans-serif;
}


=== ./app/analytics/page.tsx ===
import { AnalyticsContent } from '@/components/analytics/analytics-content'
import { InfoTooltip } from '@/components/ui/info-tooltip'

export default function AnalyticsPage() {
  return (
    <div className="space-y-6">
      <InfoTooltip
        message="⚠️ The Analytics page provides insights and visualizations on your data flow, transformation performance, and integration efficiency, helping you make data-driven decisions."
        pageIdentifier="analytics"
      />
      <AnalyticsContent />
    </div>
  )
}


=== ./styles/theme.ts ===
import { MantineThemeOverride } from '@mantine/core';

export const theme: MantineThemeOverride = {
  colorScheme: 'light',
  primaryColor: 'blue',
  // Add more theme customizations here
};


=== ./components/expanded-sidebar.tsx ===
"use client"

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Home, Database, GitBranch, HardDrive, Settings, BarChart, LogOut, StoreIcon as Storage, Zap, ChevronLeft, ChevronRight, Lock, Unlock, Briefcase } from 'lucide-react'
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { useTheme } from "@/components/theme-provider"

const navItems = [
  { title: 'Dashboard', icon: Home, href: '/' },
  { title: 'My Sources', icon: Database, href: '/sources' },
  { title: 'Load & Transform', icon: GitBranch, href: '/transformations' },
  { title: 'My Destinations', icon: HardDrive, href: '/destinations' },
  { title: 'Jobs', icon: Briefcase, href: '/jobs' },
  { title: 'Analytics', icon: BarChart, href: '/analytics' },
]

const additionalNavItems = [
  { title: 'Data Storage', icon: Storage, href: '/data-storage' },
  { 
    title: 'AI Insights', 
    icon: Zap, 
    href: '/ai-insights', 
    className: 'bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent'
  },
]

export function ExpandedSidebar() {
  const pathname = usePathname()
  const [isOpen, setIsOpen] = useState(true)
  const [isLocked, setIsLocked] = useState(false)
  const [isMobile, setIsMobile] = useState(false)
  const { theme } = useTheme()

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768)
      if (window.innerWidth < 768) {
        setIsOpen(false)
      }
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  const toggleSidebar = () => {
    if (!isLocked) {
      setIsOpen(!isOpen)
    }
  }

  const toggleLock = () => {
    setIsLocked(!isLocked)
    if (!isLocked) {
      setIsOpen(true)
    }
  }

  const isDarkMode = theme === 'dark'

  return (
    <>
      <div className={cn(
        "h-screen flex-shrink-0 transition-all duration-300 ease-in-out",
        isOpen ? "w-64" : "w-16",
        isMobile && !isOpen && "w-0"
      )}>
        <div className={cn(
          "fixed inset-y-0 left-0 z-50 flex flex-col justify-between border-r shadow-lg transition-all duration-300",
          isDarkMode ? "bg-[#2C2C3D] border-[#333333]" : "bg-white border-[#E0E0E0]",
          isOpen ? "w-64" : "w-16",
          isMobile && !isOpen && "w-0"
        )}>
          <div>
            <div className={cn(
              "flex h-16 items-center justify-between border-b px-4",
              isDarkMode ? "border-gray-800" : "border-gray-200"
            )}>
              {isOpen && (
                <span className={`text-2xl font-bold ${
                  isDarkMode ? "text-white" : "text-black"
                }`}>
                  FlowTechs
                </span>
              )}
              <Button
                variant="ghost"
                size="icon"
                className={cn("ml-auto", isOpen ? "" : "mx-auto")}
                onClick={toggleSidebar}
                aria-label={isOpen ? "Close sidebar" : "Open sidebar"}
              >
                {isOpen ? <ChevronLeft className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
              </Button>
            </div>
            <nav className="flex flex-col p-4 space-y-2">
              <TooltipProvider>
                {navItems.map((item) => (
                  <Tooltip key={item.href}>
                    <TooltipTrigger asChild>
                      <Link
                        href={item.href}
                        className={cn(
                          "flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200 ease-in-out",
                          pathname === item.href 
                            ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md" 
                            : isDarkMode
                              ? "text-[#A6A6A6] hover:bg-[#3A3A4B]"
                              : "text-[#4A4A4A] hover:bg-[#E0E0E0]",
                          !isOpen && "justify-center"
                        )}
                      >
                        <item.icon className="h-5 w-5 flex-shrink-0" />
                        {isOpen && <span>{item.title}</span>}
                      </Link>
                    </TooltipTrigger>
                    {!isOpen && (
                      <TooltipContent side="right">
                        <p>{item.title}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                ))}
              </TooltipProvider>
              {isOpen && <div className={cn(
                "border-t my-2",
                isDarkMode ? "border-gray-800" : "border-gray-200"
              )} />}
              {additionalNavItems.map((item) => (
                <TooltipProvider key={item.href}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Link
                        href={item.href}
                        className={cn(
                          "flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200 ease-in-out",
                          pathname === item.href 
                            ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-md" 
                            : isDarkMode
                              ? "text-[#A6A6A6] hover:bg-[#3A3A4B]"
                              : "text-[#4A4A4A] hover:bg-[#E0E0E0]",
                          item.title === 'AI Insights' && pathname !== item.href 
                          ? 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] bg-clip-text text-transparent'
                          : '',
                          !isOpen && "justify-center"
                        )}
                      >
                        {item.title === 'AI Insights' ? (
                          <div className={cn(
                            "relative flex-shrink-0",
                            pathname === item.href 
                              ? "text-white" 
                              : isDarkMode
                                ? "text-white"
                                : "text-black"
                          )}>
                            <item.icon className={cn(
                              "h-5 w-5",
                              pathname !== item.href && (
                                isDarkMode
                                  ? "text-white"
                                  : "text-black"
                              )
                            )} />
                          </div>
                        ) : (
                          <item.icon className="h-5 w-5 flex-shrink-0" />
                        )}
                        {isOpen && (
                          <span className={cn(
                            item.title === 'AI Insights' && pathname !== item.href 
                            ? 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] bg-clip-text text-transparent'
                            : '',
                            pathname === item.href && item.title === 'AI Insights' ? 'text-white' : ''
                          )}>
                            {item.title}
                          </span>
                        )}
                      </Link>
                    </TooltipTrigger>
                    {!isOpen && (
                      <TooltipContent side="right">
                        <p>{item.title}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                </TooltipProvider>
              ))}
            </nav>
          </div>
          <div className="p-4">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className={cn(
                      "w-full justify-start gap-3 transition-colors",
                      isDarkMode
                        ? "text-[#A6A6A6] hover:bg-[#3A3A4B]"
                        : "text-[#4A4A4A] hover:bg-[#E0E0E0]",
                      !isOpen && "justify-center"
                    )}
                  >
                    <LogOut className="h-5 w-5 flex-shrink-0" />
                    {isOpen && <span>Logout</span>}
                  </Button>
                </TooltipTrigger>
                {!isOpen && (
                  <TooltipContent side="right">
                    <p>Logout</p>
                  </TooltipContent>
                )}
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
      </div>
      <Button
        variant="outline"
        size="icon"
        className="fixed bottom-4 left-4 z-50"
        onClick={toggleLock}
        aria-label={isLocked ? "Unlock sidebar" : "Lock sidebar"}
      >
        {isLocked ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
      </Button>
    </>
  )
}


=== ./components/theme-provider.tsx ===
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

export { useTheme } from "next-themes"


=== ./components/ui/info-tooltip.tsx ===
"use client"

import { useState, useEffect } from 'react'
import { AlertCircle } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { useTheme } from "@/components/theme-provider"

interface InfoTooltipProps {
  message: string
  pageIdentifier: string
}

export function InfoTooltip({ message, pageIdentifier }: InfoTooltipProps) {
  const [showTooltip, setShowTooltip] = useState(false)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  useEffect(() => {
    const hideTooltip = localStorage.getItem(`hideTooltip-${pageIdentifier}`)
    setShowTooltip(hideTooltip !== 'true')
  }, [pageIdentifier])

  const dismissTooltip = () => {
    localStorage.setItem(`hideTooltip-${pageIdentifier}`, 'true')
    setShowTooltip(false)
  }

  if (!showTooltip) return null

  return (
    <div className={`mb-4 p-4 rounded-lg flex items-start gap-3 ${
      isDarkMode ? 'bg-[#1E3A8A]' : 'bg-[#E3F2FD]'
    }`}>
      <AlertCircle className={`w-4 h-4 mt-1 ${isDarkMode ? 'text-[#BBE1FA]' : 'text-[#1565C0]'}`} />
      <div className="flex-grow">
        <p className={`text-sm mb-2 ${isDarkMode ? 'text-[#BBE1FA]' : 'text-[#1565C0]'}`}>{message}</p>
        <Button
          variant="outline"
          size="sm"
          onClick={dismissTooltip}
          className={`mt-2 ${
            isDarkMode
              ? 'bg-[#2C2C3D] text-white hover:bg-[#3A3A4B]'
              : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'
          }`}
        >
          Don't Show This Message Again
        </Button>
      </div>
    </div>
  )
}


=== ./components/ui/tooltip.tsx ===
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


=== ./components/ui/switch.tsx ===
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-[#34C759] data-[state=unchecked]:bg-[#D1D1D6]",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


=== ./components/ui/logo.tsx ===
import Image from 'next/image'

export function Logo() {
  return (
    <Image
      src="/logo.png"
      alt="FlowTechs Logo"
      width={150}
      height={40}
      priority
    />
  )
}


=== ./components/ui/badge.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


=== ./components/ui/sidebar.tsx ===
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const SidebarContext = React.createContext<{
  collapsed: boolean;
  setCollapsed: React.Dispatch<React.SetStateAction<boolean>>;
} | null>(null)

export function SidebarProvider({ children }: { children: React.ReactNode }) {
  const [collapsed, setCollapsed] = React.useState(false)
  return (
    <SidebarContext.Provider value={{ collapsed, setCollapsed }}>
      {children}
    </SidebarContext.Provider>
  )
}

export function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider")
  }
  return context
}

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { collapsed } = useSidebar()
  return (
    <div
      ref={ref}
      className={cn(
        "flex h-screen w-[var(--sidebar-width)] flex-col border-r bg-background transition-all duration-300 ease-in-out",
        collapsed && "w-[var(--sidebar-width-collapsed)]",
        className
      )}
      {...props}
    />
  )
})
Sidebar.displayName = "Sidebar"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex h-14 items-center border-b px-6", className)}
    {...props}
  />
))
SidebarHeader.displayName = "SidebarHeader"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex-1 overflow-auto py-2", className)}
    {...props}
  />
))
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("px-3 py-2", className)}
    {...props}
  />
))
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("space-y-1", className)} {...props} />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const sidebarMenuButtonVariants = cva(
  "flex w-full items-center rounded-md p-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-background",
        ghost: "hover:bg-accent hover:text-accent-foreground",
      },
      isActive: {
        true: "bg-accent text-accent-foreground",
        false: "",
      },
    },
    defaultVariants: {
      variant: "default",
      isActive: false,
    },
  }
)

export interface SidebarMenuButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof sidebarMenuButtonVariants> {
  asChild?: boolean
}

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  SidebarMenuButtonProps
>(({ className, variant, isActive, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(sidebarMenuButtonVariants({ variant, isActive, className }))}
      ref={ref}
      {...props}
    />
  )
})
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenu = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("space-y-1", className)} {...props} />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("", className)} {...props} />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const SidebarRail = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "absolute inset-y-0 right-0 w-1 bg-accent transition-all",
      className
    )}
    {...props}
  />
))
SidebarRail.displayName = "SidebarRail"

export {
  Sidebar,
  SidebarHeader,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarRail,
}


=== ./components/ui/button.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


=== ./components/ui/toggle.tsx ===
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Toggle = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[32px] w-[52px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-[#34C759] data-[state=unchecked]:bg-[#D1D1D6]",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-[26px] w-[26px] rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-[22px] data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Toggle.displayName = SwitchPrimitives.Root.displayName

export { Toggle }


=== ./components/ui/input.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


=== ./components/settings/settings-form.tsx ===
"use client"

import { useState } from 'react'
import { useTheme } from 'next-themes'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'

export function SettingsForm() {
  const [settings, setSettings] = useState({
    companyName: 'FlowTechs Inc.',
    email: 'admin@flowtechs.com',
  })
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSettings({ ...settings, [e.target.name]: e.target.value })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle form submission here
    console.log('Settings submitted:', settings)
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Settings</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <Label htmlFor="companyName">Company Name</Label>
              <Input
                id="companyName"
                type="text"
                name="companyName"
                value={settings.companyName}
                onChange={handleChange}
              />
            </div>
            <div>
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                name="email"
                value={settings.email}
                onChange={handleChange}
              />
            </div>
            {/* Add more settings fields as needed */}
            <Button type="submit">Save Settings</Button>
          </div>
        </form>
      </CardContent>
    </Card>
  )
}


=== ./components/settings/user-profile.tsx ===
"use client"

import { useState } from 'react'
import { useTheme } from 'next-themes'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'

export function UserProfile() {
  const [user, setUser] = useState({
    name: 'John Doe',
    email: 'john.doe@example.com',
    avatar: '/placeholder.svg?height=100&width=100',
  })
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUser({ ...user, [e.target.name]: e.target.value })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Here you would typically send the updated user info to your backend
    console.log('User info updated:', user)
  }

  return (
    <Card className={`transition-all duration-200 hover:shadow-lg ${
  isDarkMode 
    ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
    : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
}`}>
      <CardHeader>
        <CardTitle className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-black'}`}>User Profile</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="flex items-center space-x-4">
            <Avatar className="h-20 w-20">
              <AvatarImage src={user.avatar} alt={user.name} />
              <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
            </Avatar>
            <Button variant="outline" className={`${
  isDarkMode 
    ? 'text-white hover:bg-[#3A3A4B]' 
    : 'text-black hover:bg-[#E0E0E0]'
}`}>Change Avatar</Button>
          </div>
          <div className="space-y-2">
            <Label htmlFor="name">Name</Label>
            <Input
              id="name"
              name="name"
              value={user.name}
              onChange={handleChange}
              className={`${
    isDarkMode
      ? 'bg-[#2C2C3B] text-white border-[#3A3A4B] focus:border-[#6366F1] placeholder-[#6C727C]'
      : 'bg-white text-black border-[#E0E0E0] focus:border-[#1565C0] placeholder-[#BDBDBD]'
  }`}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              name="email"
              type="email"
              value={user.email}
              onChange={handleChange}
              className={`${
    isDarkMode
      ? 'bg-[#2C2C3B] text-white border-[#3A3A4B] focus:border-[#6366F1] placeholder-[#6C727C]'
      : 'bg-white text-black border-[#E0E0E0] focus:border-[#1565C0] placeholder-[#BDBDBD]'
  }`}
            />
          </div>
          <Button type="submit" className={`${
  isDarkMode
    ? 'bg-[#2196F3] text-white hover:bg-[#1E88E5]'
    : 'bg-[#1565C0] text-white hover:bg-[#0D47A1]'
}`}>Update Profile</Button>
        </form>
      </CardContent>
    </Card>
  )
}


=== ./components/settings/settings-header.tsx ===
export function SettingsHeader() {
  return (
    <div className="mb-6">
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Settings</h1>
    </div>
  )
}


=== ./components/error-boundary.tsx ===
"use client"

import React from 'react'

interface ErrorBoundaryProps {
  children: React.ReactNode
}

interface ErrorBoundaryState {
  hasError: boolean
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("Uncaught error:", error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong. Please try refreshing the page.</h1>
    }

    return this.props.children
  }
}

export default ErrorBoundary


=== ./components/data-storage/ai-insights/preset-suggestions.tsx ===
"use client"

import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'

const suggestions = [
  "Write a to-do list for a personal project or task.",
  "Generate an email to reply to a job offer.",
  "Summarize this article or text for me in one paragraph.",
  "Find correlations in my Shopify data.",
]

export function PresetSuggestions() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <div className="flex flex-wrap gap-2">
      {suggestions.map((suggestion, index) => (
        <Button
          key={index}
          variant="outline"
          className={`text-sm font-normal ${
            isDarkMode
              ? 'bg-[#2C2C3D] text-white border-[#3A3A4B] hover:bg-[#3A3A4B]'
              : 'bg-white text-black border-[#E0E0E0] hover:bg-gray-100'
          }`}
        >
          {suggestion}
        </Button>
      ))}
    </div>
  )
}


=== ./components/data-storage/ai-insights/file-upload.tsx ===
"use client"

import { useCallback, useState, useEffect } from 'react'
import { useDropzone } from 'react-dropzone'
import { Progress } from '@/components/ui/progress'
import { useTheme } from 'next-themes'

export function FileUpload({ onFileUpload }: { onFileUpload: (file: File | null) => void }) {
  const [file, setFile] = useState<File | null>(null)
  const [uploadProgress, setUploadProgress] = useState(0)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles[0]) {
      setFile(acceptedFiles[0])
      onFileUpload(acceptedFiles[0])
    }
  }, [onFileUpload])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })

  useEffect(() => {
    if (file) {
      const timer = setInterval(() => {
        setUploadProgress((oldProgress) => {
          if (oldProgress === 100) {
            clearInterval(timer)
            return 100
          }
          return Math.min(oldProgress + 10, 100)
        })
      }, 500)
      return () => clearInterval(timer)
    }
  }, [file])

  return (
    <div 
      {...getRootProps()} 
      className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
        isDarkMode
          ? 'bg-[#2C2C3D] border-[#3A3A4B] text-white hover:bg-[#3A3A4B]'
          : 'bg-white border-[#E0E0E0] text-black hover:bg-gray-50'
      }`}
    >
      <input {...getInputProps()} />
      {isDragActive ? (
        <p className="font-poppins text-base">Drop the files here ...</p>
      ) : (
        <p className="font-poppins text-base">Drag 'n' drop some files here, or click to select files</p>
      )}
      {file && (
        <div className="mt-4">
          <Progress value={uploadProgress} className="w-full" />
        </div>
      )}
    </div>
  )
}


=== ./components/data-storage/ai-insights/ai-insights-content.tsx ===
"use client"

import { useState } from 'react';
import { useTheme } from 'next-themes'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Paperclip, Image, Send } from 'lucide-react'
import { FileUpload } from '@/components/data-storage/ai-insights/file-upload'
import { PresetSuggestions } from '@/components/data-storage/ai-insights/preset-suggestions'

export function AIInsightsContent() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'
  const [input, setInput] = useState('')
  const [file, setFile] = useState<File | null>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    console.log('Submitted:', input)
    setInput('')
  }

  return (
    <div className="space-y-6 p-8 font-poppins">
      <div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] bg-clip-text text-transparent">
          Hi there, [User Name]
        </h1>
        <p className="text-xl mt-2 font-medium text-[#4A4A4A] dark:text-[#D1D1D6]">
          What would you like to explore today?
        </p>
        <p className="mt-2 text-[#4A4A4A] dark:text-[#D1D1D6]">
          Upload your Shopify data to explore inferences, correlations, and insights from your data using AI.
        </p>
      </div>

      <FileUpload onFileUpload={setFile} />

      {file && (
        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-green-800 text-green-100' : 'bg-green-100 text-green-800'}`}>
          File uploaded successfully. Analyzing your data...
        </div>
      )}

      <Card className={isDarkMode ? 'bg-[#2C2C3D] border-[#3A3A4B] shadow-[0_4px_12px_rgba(0,0,0,0.2)]' : 'bg-white border-[#E0E0E0] shadow-[0_4px_12px_rgba(0,0,0,0.1)]'}>
        <CardContent className="p-4">
          <PresetSuggestions />
          <form onSubmit={handleSubmit} className="mt-4 flex items-center space-x-2">
            <Input
              type="text"
              placeholder="Ask whatever you want..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className={`flex-grow ${
                isDarkMode
                  ? 'bg-[#2C2C3D] border-[#3A3A4B] text-white placeholder-[#A6A6A6]'
                  : 'bg-[#F5F5F5] border-[#E0E0E0] text-black placeholder-[#B0B0B0]'
              } text-sm font-light`}
            />
            <Button type="button" variant="outline" size="icon">
              <Paperclip className="h-4 w-4" />
            </Button>
            <Button type="button" variant="outline" size="icon">
              <Image className="h-4 w-4" />
            </Button>
            <Button 
              type="submit" 
              className="bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] hover:from-[#786EFF] hover:to-[#A673CC] text-white"
            >
              <Send className="h-4 w-4" />
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}


=== ./components/data-storage/data-storage-content.tsx ===
"use client"

import { useState } from 'react'
import { useTheme } from 'next-themes'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Download } from 'lucide-react'

interface FileData {
  fileName: string
  fileSize: string
  creationDate: string
  latestDownloadDate: string
  downloadUrl: string
}

const mockData: FileData[] = [
  { fileName: "orders_20241111.csv", fileSize: "12 KB", creationDate: "2024-11-11", latestDownloadDate: "2024-11-15", downloadUrl: "https://example.com/files/orders_20241111.csv" },
  { fileName: "customers_20241023.csv", fileSize: "34 KB", creationDate: "2024-10-23", latestDownloadDate: "2024-11-01", downloadUrl: "https://example.com/files/customers_20241023.csv" },
  { fileName: "inventory_20241020.csv", fileSize: "56 KB", creationDate: "2024-10-20", latestDownloadDate: "2024-11-10", downloadUrl: "https://example.com/files/inventory_20241020.csv" },
  { fileName: "products_20241105.csv", fileSize: "28 KB", creationDate: "2024-11-05", latestDownloadDate: "2024-11-12", downloadUrl: "https://example.com/files/products_20241105.csv" },
  { fileName: "sales_20241101.csv", fileSize: "45 KB", creationDate: "2024-11-01", latestDownloadDate: "2024-11-14", downloadUrl: "https://example.com/files/sales_20241101.csv" },
  { fileName: "analytics_20241110.csv", fileSize: "67 KB", creationDate: "2024-11-10", latestDownloadDate: "2024-11-16", downloadUrl: "https://example.com/files/analytics_20241110.csv" },
]

export function DataStorageContent() {
  const [files, setFiles] = useState<FileData[]>(mockData)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <Card className={`transition-all duration-200 hover:shadow-lg ${
      isDarkMode 
        ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
        : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
    }`}>
      <CardHeader>
        <CardTitle className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-black'}`}>Stored Files</CardTitle>
      </CardHeader>
      <CardContent>
        {files.length > 0 ? (
          <Table>
            <TableHeader className={isDarkMode ? 'bg-[#2C2C3D]' : 'bg-[#F5F5F5]'}>
              <TableRow>
                <TableHead className={isDarkMode ? 'text-white' : 'text-black'}>File Name</TableHead>
                <TableHead className={isDarkMode ? 'text-white' : 'text-black'}>File Size</TableHead>
                <TableHead className={isDarkMode ? 'text-white' : 'text-black'}>Creation Date</TableHead>
                <TableHead className={isDarkMode ? 'text-white' : 'text-black'}>Latest Download Date</TableHead>
                <TableHead className={isDarkMode ? 'text-white' : 'text-black'}>Download</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {files.map((file, index) => (
                <TableRow 
                  key={index}
                  className={`transition-all duration-200 ${
                    isDarkMode 
                      ? 'hover:bg-[#3A3A4B] hover:shadow-[inset_0_0_6px_rgba(255,255,255,0.1)]' 
                      : 'hover:bg-gray-50 hover:shadow-[0_0_6px_rgba(0,0,0,0.1)]'
                  }`}
                >
                  <TableCell className={isDarkMode ? 'text-white' : 'text-black'}>{file.fileName}</TableCell>
                  <TableCell className={isDarkMode ? 'text-white' : 'text-black'}>{file.fileSize}</TableCell>
                  <TableCell className={isDarkMode ? 'text-white' : 'text-black'}>{file.creationDate}</TableCell>
                  <TableCell className={isDarkMode ? 'text-white' : 'text-black'}>{file.latestDownloadDate}</TableCell>
                  <TableCell>
                    <a 
                      href={file.downloadUrl} 
                      download 
                      className={`inline-flex items-center justify-center w-8 h-8 rounded-full transition-colors ${
                        isDarkMode 
                          ? 'text-white hover:bg-[#3A3A4B]' 
                          : 'text-black hover:bg-gray-200'
                      }`}
                      aria-label={`Download ${file.fileName}`}
                    >
                      <Download className="w-5 h-5" />
                    </a>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <p className={`text-center py-4 ${isDarkMode ? 'text-white' : 'text-black'}`}>
            No files available for download.
          </p>
        )}
      </CardContent>
    </Card>
  )
}


=== ./components/ai-insights/preset-suggestions.tsx ===
"use client"

import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'

const suggestions = [
  "Write a to-do list for a personal project or task.",
  "Generate an email to reply to a job offer.",
  "Summarize this article or text for me in one paragraph.",
  "Find correlations in my Shopify data.",
]

export function PresetSuggestions() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <div className="flex flex-wrap gap-2">
      {suggestions.map((suggestion, index) => (
        <Button
          key={index}
          variant="outline"
          className={`text-sm font-normal transition-all ${
            isDarkMode
              ? 'bg-[#2C2C3D] text-white border-[#3A3A4B] hover:bg-[#3A3A4B] hover:shadow-[0_0_5px_rgba(255,255,255,0.1)]'
              : 'bg-white text-black border-[#E0E0E0] hover:bg-gray-100 hover:shadow-[0_0_5px_rgba(0,0,0,0.1)]'
          }`}
        >
          {suggestion}
        </Button>
      ))}
    </div>
  )
}


=== ./components/ai-insights/file-upload.tsx ===
"use client"

import { useCallback, useState, useEffect } from 'react'
import { useDropzone } from 'react-dropzone'
import { Progress } from '@/components/ui/progress'
import { useTheme } from 'next-themes'

export function FileUpload({ onFileUpload }: { onFileUpload: (file: File | null) => void }) {
  const [file, setFile] = useState<File | null>(null)
  const [uploadProgress, setUploadProgress] = useState(0)
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles[0]) {
      setFile(acceptedFiles[0])
      onFileUpload(acceptedFiles[0])
    }
  }, [onFileUpload])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })

  useEffect(() => {
    if (file) {
      const timer = setInterval(() => {
        setUploadProgress((oldProgress) => {
          if (oldProgress === 100) {
            clearInterval(timer)
            return 100
          }
          return Math.min(oldProgress + 10, 100)
        })
      }, 500)
      return () => clearInterval(timer)
    }
  }, [file])

  return (
    <div 
      {...getRootProps()} 
      className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
        isDarkMode
          ? 'bg-[#2C2C3D] border-[#3A3A4B] text-[#A6A6A6] hover:bg-[#3A3A4B]'
          : 'bg-white border-[#E0E0E0] text-[#6F6F6F] hover:bg-gray-50'
      }`}
    >
      <input {...getInputProps()} />
      {isDragActive ? (
        <p className="text-base">Drop the files here ...</p>
      ) : (
        <p className="text-base">Drag 'n' drop some files here, or click to select files</p>
      )}
      {file && (
        <div className="mt-4">
          <Progress value={uploadProgress} className="w-full" />
        </div>
      )}
    </div>
  )
}


=== ./components/ai-insights/ai-insights-content.tsx ===
"use client"

import { useState } from 'react';
import { useTheme } from 'next-themes'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Paperclip, Image, Send } from 'lucide-react'
import { FileUpload } from '@/components/ai-insights/file-upload'
import { PresetSuggestions } from '@/components/ai-insights/preset-suggestions'

export function AIInsightsContent() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'
  const [input, setInput] = useState('')
  const [file, setFile] = useState<File | null>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    console.log('Submitted:', input)
    setInput('')
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className={`text-3xl font-bold text-32 ${
          isDarkMode
            ? 'bg-gradient-to-r from-[#BB86FC] to-[#6200EE] bg-clip-text text-transparent'
            : 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] bg-clip-text text-transparent'
        }`}>
          Hi there, [User Name]
        </h1>
        <p className={`text-xl mt-2 font-medium text-20 ${
          isDarkMode ? 'text-[#D1D1D6]' : 'text-[#4A4A4A]'
        }`}>
          What would you like to explore today?
        </p>
        <p className={`mt-2 text-16 ${
          isDarkMode ? 'text-[#A6A6A6]' : 'text-[#6F6F6F]'
        }`}>
          Upload your Shopify data to explore inferences, correlations, and insights from your data using AI.
        </p>
      </div>

      <FileUpload onFileUpload={setFile} />

      {file && (
        <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-green-800 text-green-100' : 'bg-green-100 text-green-800'}`}>
          File uploaded successfully. Analyzing your data...
        </div>
      )}

      <Card className={`${
        isDarkMode 
          ? 'bg-[#2C2C3D] border-[#3A3A4B] shadow-[0_4px_12px_rgba(0,0,0,0.2)]' 
          : 'bg-white border-[#E0E0E0] shadow-[0_4px_12px_rgba(0,0,0,0.1)]'
      }`}>
        <CardContent className="p-4">
          <PresetSuggestions />
          <form onSubmit={handleSubmit} className="mt-4 flex items-center space-x-2">
            <Input
              type="text"
              placeholder="Ask whatever you want..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className={`flex-grow ${
                isDarkMode
                  ? 'bg-[#3A3A4B] border-[#4C4C5A] text-white placeholder-[#A6A6A6]'
                  : 'bg-[#F5F5F5] border-[#E0E0E0] text-black placeholder-[#6F6F6F]'
              } text-sm`}
            />
            <Button type="button" variant="outline" size="icon" className={
              isDarkMode
                ? 'bg-[#3A3A4B] hover:bg-[#4C4C5A] text-white'
                : 'bg-[#E0E0E0] hover:bg-[#BDBDBD] text-black'
            }>
              <Paperclip className="h-4 w-4" />
            </Button>
            <Button type="button" variant="outline" size="icon" className={
              isDarkMode
                ? 'bg-[#3A3A4B] hover:bg-[#4C4C5A] text-white'
                : 'bg-[#E0E0E0] hover:bg-[#BDBDBD] text-black'
            }>
              <Image className="h-4 w-4" />
            </Button>
            <Button 
              type="submit" 
              className={`text-white ${
                isDarkMode
                  ? 'bg-gradient-to-r from-[#BB86FC] to-[#6200EE] hover:from-[#CC99FF] hover:to-[#7357EE]'
                  : 'bg-gradient-to-r from-[#6C63FF] to-[#9D50BB] hover:from-[#786EFF] hover:to-[#A673CC]'
              }`}
            >
              <Send className="h-4 w-4" />
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}


=== ./components/transformations/add-transformation-modal.tsx ===
"use client"

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'
import { useTheme } from "@/components/theme-provider"
import { ExpressionEditor } from './expression-editor'

const API_LIST = ['Orders', 'Customers', 'Products', 'Inventory']

const mockFields = {
  Orders: ['id', 'order_number', 'total_price', 'created_at'],
  Customers: ['id', 'first_name', 'last_name', 'email'],
  Products: ['id', 'title', 'price', 'inventory_quantity'],
  Inventory: ['product_id', 'warehouse_id', 'quantity', 'updated_at'],
}

interface AddTransformationModalProps {
  isOpen: boolean
  onClose: () => void
}

export function AddTransformationModal({ isOpen, onClose }: AddTransformationModalProps) {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    name: '',
    dataSource: '',
    selectedApis: [] as string[],
    selectedFields: {} as Record<string, string[]>,
    derivedColumns: {} as Record<string, { name: string; expression: string }[]>,
  })

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const handleSelectChange = (value: string) => {
    setFormData({ ...formData, dataSource: value })
  }

  const handleApiToggle = (api: string) => {
    setFormData(prev => {
      const newSelectedApis = prev.selectedApis.includes(api)
        ? prev.selectedApis.filter(a => a !== api)
        : [...prev.selectedApis, api]

      const newSelectedFields = { ...prev.selectedFields }
      if (!newSelectedFields[api]) {
        newSelectedFields[api] = mockFields[api as keyof typeof mockFields] || []
      } else {
        delete newSelectedFields[api]
      }

      const newDerivedColumns = { ...prev.derivedColumns }
      if (!newDerivedColumns[api]) {
        newDerivedColumns[api] = []
      } else {
        delete newDerivedColumns[api]
      }

      return {
        ...prev,
        selectedApis: newSelectedApis,
        selectedFields: newSelectedFields,
        derivedColumns: newDerivedColumns,
      }
    })
  }

  const handleFieldToggle = (api: string, field: string) => {
    setFormData(prev => ({
      ...prev,
      selectedFields: {
        ...prev.selectedFields,
        [api]: prev.selectedFields[api]?.includes(field)
          ? prev.selectedFields[api].filter(f => f !== field)
          : [...(prev.selectedFields[api] || []), field]
      }
    }))
  }

  const handleAddDerivedColumn = (api: string, name: string, expression: string) => {
    setFormData(prev => ({
      ...prev,
      derivedColumns: {
        ...prev.derivedColumns,
        [api]: [...(prev.derivedColumns[api] || []), { name, expression }]
      }
    }))
  }

  const handleDeleteDerivedColumn = (api: string, name: string) => {
    setFormData(prev => ({
      ...prev,
      derivedColumns: {
        ...prev.derivedColumns,
        [api]: prev.derivedColumns[api].filter(column => column.name !== name)
      }
    }))
  }

  const handleNext = () => {
    if (step < 4) setStep(step + 1)
  }

  const handleBack = () => {
    if (step > 1) setStep(step - 1)
  }

  const handleSubmit = () => {
    console.log('Submitting:', formData)
    // Here you would typically send the data to your backend
    onClose()
  }

  const handleSkip = () => {
    handleSubmit() // Skip derived columns and proceed to file generation
  }

  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className={`text-right ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className={`col-span-3 ${
                  isDarkMode
                    ? 'bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]'
                    : 'bg-white text-gray-900 border-gray-300 focus:border-blue-500 placeholder-gray-400'
                }`}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="dataSource" className={`text-right ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>
                Data Source
              </Label>
              <Select onValueChange={handleSelectChange} value={formData.dataSource}>
                <SelectTrigger className={`col-span-3 ${
                  isDarkMode
                    ? 'bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B]'
                    : 'bg-white text-gray-900 border-gray-300'
                }`}>
                  <SelectValue placeholder="Select a data source" />
                </SelectTrigger>
                <SelectContent className={isDarkMode ? 'bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B]' : 'bg-white text-gray-900 border-gray-300'}>
                  <SelectItem value="https://myshop.myshopify.com">My Shopify Store</SelectItem>
                  <SelectItem value="https://insights.myshopify.com">Shopify Insights</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )
      case 2:
        return (
          <div className="grid gap-4 py-4">
            <Label className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>Select APIs:</Label>
            {API_LIST.map((api) => (
              <div key={api} className="flex items-center space-x-2">
                <Checkbox
                  id={api}
                  checked={formData.selectedApis.includes(api)}
                  onCheckedChange={() => handleApiToggle(api)}
                  className={isDarkMode ? 'border-[#3A3F4B]' : 'border-gray-300'}
                />
                <Label htmlFor={api} className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>{api}</Label>
              </div>
            ))}
          </div>
        )
      case 3:
        return (
          <div className="grid gap-4 py-4">
            <Label className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>Select fields to include:</Label>
            {formData.selectedApis.map((api) => (
              <div key={api} className="mb-4">
                <h3 className={`font-semibold mb-2 ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>{api}</h3>
                {mockFields[api as keyof typeof mockFields]?.map((field) => (
                  <div key={field} className="flex items-center space-x-2">
                    <Checkbox
                      id={`${api}-${field}`}
                      checked={formData.selectedFields[api]?.includes(field)}
                      onCheckedChange={() => handleFieldToggle(api, field)}
                      className={isDarkMode ? 'border-[#3A3F4B]' : 'border-gray-300'}
                    />
                    <Label htmlFor={`${api}-${field}`} className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>{field}</Label>
                  </div>
                ))}
              </div>
            ))}
          </div>
        )
      case 4:
        return (
          <ExpressionEditor
            selectedApis={formData.selectedApis}
            selectedFields={formData.selectedFields}
            onAddDerivedColumn={handleAddDerivedColumn}
            onDeleteDerivedColumn={handleDeleteDerivedColumn}
            derivedColumns={formData.derivedColumns}
            isDarkMode={isDarkMode}
            onSkip={handleSkip}
          />
        )
      default:
        return null
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={`sm:max-w-[700px] ${isDarkMode ? 'bg-[#1E1E2F] text-white' : 'bg-white text-gray-900'}`}>
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold">
            {step === 4 ? "Create Derived Columns" : `Create New Transformation - Step ${step} of 4`}
          </DialogTitle>
        </DialogHeader>
        {renderStepContent()}
        <DialogFooter>
          {step > 1 && (
            <Button onClick={handleBack} variant="outline" className={isDarkMode
              ? 'bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]'
              : 'bg-gray-100 text-gray-800 hover:bg-gray-200 active:bg-gray-300'
            }>
              Back
            </Button>
          )}
          {step < 4 ? (
            <Button onClick={handleNext} className={isDarkMode
              ? 'bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]'
              : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800'
            }>
              Next
            </Button>
          ) : (
            <Button onClick={handleSubmit} className={isDarkMode
              ? 'bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]'
              : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800'
            }>
              Create Transformation
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}


=== ./components/transformations/create-transformation-modal.tsx ===
"use client"

import { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'

const API_LIST = ['Order', 'Customer', 'Product', 'Inventory']

// Mock function to fetch fields for selected APIs
const fetchFields = async (apis: string[]) => {
  // In a real application, this would be an API call
  const mockFields = {
    Order: ['id', 'order_number', 'total_price', 'created_at'],
    Customer: ['id', 'first_name', 'last_name', 'email'],
    Product: ['id', 'title', 'price', 'inventory_quantity'],
    Inventory: ['product_id', 'warehouse_id', 'quantity', 'updated_at'],
  }
  
  return apis.reduce((acc, api) => {
    acc[api] = mockFields[api as keyof typeof mockFields] || []
    return acc
  }, {} as Record<string, string[]>)
}

export function CreateTransformationModal({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    name: '',
    selectedApis: [] as string[],
    selectedFields: {} as Record<string, string[]>,
  })
  const [availableFields, setAvailableFields] = useState<Record<string, string[]>>({})

  useEffect(() => {
    if (step === 3 && formData.selectedApis.length > 0) {
      fetchFields(formData.selectedApis).then(setAvailableFields)
    }
  }, [step, formData.selectedApis])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const handleApiToggle = (api: string) => {
    setFormData(prev => ({
      ...prev,
      selectedApis: prev.selectedApis.includes(api)
        ? prev.selectedApis.filter(a => a !== api)
        : [...prev.selectedApis, api],
      selectedFields: prev.selectedApis.includes(api)
        ? { ...prev.selectedFields, [api]: [] }
        : { ...prev.selectedFields, [api]: prev.selectedFields[api] || [] }
    }))
  }

  const handleFieldToggle = (api: string, field: string) => {
    setFormData(prev => ({
      ...prev,
      selectedFields: {
        ...prev.selectedFields,
        [api]: prev.selectedFields[api]?.includes(field)
          ? prev.selectedFields[api].filter(f => f !== field)
          : [...(prev.selectedFields[api] || []), field]
      }
    }))
  }

  const handleNext = () => {
    if (step < 3) setStep(step + 1)
  }

  const handleBack = () => {
    if (step > 1) setStep(step - 1)
  }

  const handleSubmit = () => {
    console.log('Submitting:', formData)
    // Here you would typically send the data to your backend
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Transformation</DialogTitle>
        </DialogHeader>
        {step === 1 && (
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="col-span-3"
              />
            </div>
          </div>
        )}
        {step === 2 && (
          <div className="grid gap-4 py-4">
            <Label>Select APIs:</Label>
            {API_LIST.map((api) => (
              <div key={api} className="flex items-center space-x-2">
                <Checkbox
                  id={api}
                  checked={formData.selectedApis.includes(api)}
                  onCheckedChange={() => handleApiToggle(api)}
                />
                <Label htmlFor={api}>{api}</Label>
              </div>
            ))}
          </div>
        )}
        {step === 3 && (
          <div className="grid gap-4 py-4">
            <Label>Select fields to include:</Label>
            {formData.selectedApis.map((api) => (
              <div key={api} className="mb-4">
                <h3 className="font-semibold mb-2">{api}</h3>
                {availableFields[api]?.map((field) => (
                  <div key={field} className="flex items-center space-x-2">
                    <Checkbox
                      id={`${api}-${field}`}
                      checked={formData.selectedFields[api]?.includes(field)}
                      onCheckedChange={() => handleFieldToggle(api, field)}
                    />
                    <Label htmlFor={`${api}-${field}`}>{field}</Label>
                  </div>
                ))}
              </div>
            ))}
          </div>
        )}
        <div className="flex justify-between mt-4">
          {step > 1 && (
            <Button onClick={handleBack}>Back</Button>
          )}
          {step < 3 ? (
            <Button onClick={handleNext}>Next</Button>
          ) : (
            <Button onClick={handleSubmit}>Create Transformation</Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}


=== ./components/transformations/expression-editor.tsx ===
"use client"

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog'
import { Trash2 } from 'lucide-react'

interface ExpressionEditorProps {
  selectedApis: string[]
  selectedFields: Record<string, string[]>
  onAddDerivedColumn: (api: string, name: string, expression: string) => void
  onDeleteDerivedColumn: (api: string, name: string) => void
  derivedColumns: Record<string, { name: string; expression: string }[]>
  isDarkMode: boolean
  onSkip: () => void
}

const functions = {
  Arithmetic: [
    { name: 'SUM', description: 'Adds up the values', syntax: 'SUM(field1, field2, ...)' },
    { name: 'AVG', description: 'Calculates the average of the values', syntax: 'AVG(field1, field2, ...)' },
  ],
  Logical: [
    { name: 'IF', description: 'Conditional statement', syntax: 'IF(condition, value_if_true, value_if_false)' },
    { name: 'AND', description: 'Logical AND', syntax: 'AND(condition1, condition2, ...)' },
    { name: 'OR', description: 'Logical OR', syntax: 'OR(condition1, condition2, ...)' },
  ],
  Text: [
    { name: 'CONCAT', description: 'Concatenates two or more strings', syntax: 'CONCAT(text1, text2, ...)' },
    { name: 'REGEXP_EXTRACT', description: 'Extracts a pattern from a string', syntax: "REGEXP_EXTRACT(field, 'pattern')" },
    { name: 'REGEXP_REPLACE', description: 'Replaces a pattern in a string', syntax: "REGEXP_REPLACE(field, 'pattern', 'replacement')" },
  ],
  Date: [
    { name: 'DATE_DIFF', description: 'Calculates the difference between two dates', syntax: "DATE_DIFF(date1, date2, 'unit')" },
    { name: 'DATE_ADD', description: 'Adds a specified time interval to a date', syntax: "DATE_ADD(date, interval, 'unit')" },
  ],
}

export function ExpressionEditor({ selectedApis, selectedFields, onAddDerivedColumn, onDeleteDerivedColumn, derivedColumns, isDarkMode, onSkip }: ExpressionEditorProps) {
  const [currentApi, setCurrentApi] = useState(selectedApis[0])
  const [newColumnName, setNewColumnName] = useState('')
  const [expression, setExpression] = useState('')
  const [error, setError] = useState('')
  const [isAlertOpen, setIsAlertOpen] = useState(false)
  const [pendingApiChange, setPendingApiChange] = useState<string | null>(null)

  useEffect(() => {
    validateExpression(expression)
  }, [expression])

  const validateExpression = (expr: string): boolean => {
    try {
      // Check for balanced parentheses
      let parenthesesCount = 0
      for (let char of expr) {
        if (char === '(') parenthesesCount++
        if (char === ')') parenthesesCount--
        if (parenthesesCount < 0) throw new Error('Unbalanced parentheses')
      }
      if (parenthesesCount !== 0) throw new Error('Unbalanced parentheses')

      // Check if all used fields are in the selectedFields array
      const usedFields = expr.match(/[a-zA-Z_]\w*/g) || []
      const invalidFields = usedFields.filter(field => 
        !selectedFields[currentApi].includes(field) && 
        !Object.values(functions).flat().some(func => func.name === field)
      )
      if (invalidFields.length > 0) {
        throw new Error(`Invalid fields or functions: ${invalidFields.join(', ')}`)
      }

      setError('')
      return true
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Invalid expression')
      return false
    }
  }

  const handleAddColumn = () => {
    if (validateExpression(expression)) {
      onAddDerivedColumn(currentApi, newColumnName, expression)
      setNewColumnName('')
      setExpression('')
    }
  }

  const handleApiChange = (api: string) => {
    if (newColumnName || expression) {
      setPendingApiChange(api)
      setIsAlertOpen(true)
    } else {
      setCurrentApi(api)
    }
  }

  const confirmApiChange = () => {
    if (pendingApiChange) {
      setCurrentApi(pendingApiChange)
      setNewColumnName('')
      setExpression('')
      setError('')
      setIsAlertOpen(false)
      setPendingApiChange(null)
    }
  }

  const cancelApiChange = () => {
    setIsAlertOpen(false)
    setPendingApiChange(null)
  }

  const insertFunction = (funcSyntax: string) => {
    setExpression(prev => prev + funcSyntax)
  }

  return (
    <div className="space-y-4">
      <Tabs value={currentApi} onValueChange={handleApiChange}>
        <TabsList>
          {selectedApis.map(api => (
            <TabsTrigger key={api} value={api}>{api}</TabsTrigger>
          ))}
        </TabsList>
        {selectedApis.map(api => (
          <TabsContent key={api} value={api}>
            <div className="space-y-4">
              <div>
                <Label htmlFor="newColumnName" className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>New Column Name</Label>
                <Input
                  id="newColumnName"
                  value={newColumnName}
                  onChange={(e) => setNewColumnName(e.target.value)}
                  className={isDarkMode
                    ? 'bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]'
                    : 'bg-white text-gray-900 border-gray-300 focus:border-blue-500 placeholder-gray-400'
                  }
                />
              </div>
              <div>
                <Label htmlFor="expression" className={isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}>Expression</Label>
                <Textarea
                  id="expression"
                  value={expression}
                  onChange={(e) => setExpression(e.target.value)}
                  className={isDarkMode
                    ? 'bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]'
                    : 'bg-white text-gray-900 border-gray-300 focus:border-blue-500 placeholder-gray-400'
                  }
                  rows={4}
                />
              </div>
              {error && <p className="text-red-500">{error}</p>}
              <Button 
                onClick={handleAddColumn} 
                disabled={!expression || !newColumnName || !!error}
                className={isDarkMode
                  ? 'bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]'
                  : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800'
                }
              >
                Add Derived Column
              </Button>
              <div>
                <h3 className={`font-semibold mb-2 ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>Available Fields:</h3>
                <div className="flex flex-wrap gap-2">
                  {selectedFields[api].map((field) => (
                    <span key={field} className={`px-2 py-1 rounded ${isDarkMode ? 'bg-[#2C2C3B] text-[#E4E7EB]' : 'bg-gray-200 text-gray-700'}`}>
                      {field}
                    </span>
                  ))}
                </div>
              </div>
              <div>
                <h3 className={`font-semibold mb-2 ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>Available Functions:</h3>
                <Accordion type="single" collapsible className="w-full">
                  {Object.entries(functions).map(([category, funcs]) => (
                    <AccordionItem key={category} value={category}>
                      <AccordionTrigger>{category}</AccordionTrigger>
                      <AccordionContent>
                        <div className="grid grid-cols-1 gap-2">
                          {funcs.map((func) => (
                            <div key={func.name} className={`p-2 rounded ${isDarkMode ? 'bg-[#2C2C3B] text-[#E4E7EB]' : 'bg-gray-200 text-gray-700'}`}>
                              <span className="font-semibold cursor-pointer" onClick={() => insertFunction(func.syntax)}>{func.name}</span>: {func.description}
                            </div>
                          ))}
                        </div>
                      </AccordionContent>
                    </AccordionItem>
                  ))}
                </Accordion>
              </div>
              <div>
                <h3 className={`font-semibold mb-2 ${isDarkMode ? 'text-[#AAB2BF]' : 'text-gray-700'}`}>Derived Columns:</h3>
                {derivedColumns[api]?.map((column, index) => (
                  <div key={index} className={`p-2 rounded mb-2 flex justify-between items-center ${isDarkMode ? 'bg-[#2C2C3B] text-[#E4E7EB]' : 'bg-gray-200 text-gray-700'}`}>
                    <div>
                      <span className="font-semibold">{column.name}</span>: {column.expression}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => onDeleteDerivedColumn(api, column.name)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
        ))}
      </Tabs>
      <Button onClick={onSkip} variant="outline" className={isDarkMode
        ? 'bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]'
        : 'bg-gray-100 text-gray-800 hover:bg-gray-200 active:bg-gray-300'
      }>
        Skip This Step
      </Button>
      <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Warning</AlertDialogTitle>
            <AlertDialogDescription>
              Switching APIs will reset your current derived column. Do you want to continue?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={cancelApiChange}>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={confirmApiChange}>Continue</AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}


=== ./components/transformations/transformations-list.tsx ===
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'

const transformations = [
  { name: 'Order Transformation', dataSource: 'https://myshop.myshopify.com', apiList: 'Orders, Customers', lastModified: '2023-05-15', status: 'Active' },
  { name: 'Customer Insights', dataSource: 'https://insights.myshopify.com', apiList: 'Customers, Analytics', lastModified: '2023-05-10', status: 'Inactive' },
]

export function TransformationsList({isDarkMode}) {
  return (
    <Card className={`transition-all duration-200 hover:shadow-lg ${
  isDarkMode 
    ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
    : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
}`}>
      <CardHeader>
        <CardTitle className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-black'}`}>Saved Transformations</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Data Source</TableHead>
              <TableHead>Selected APIs</TableHead>
              <TableHead>Last Modified</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {transformations.map((transformation, index) => (
              <TableRow key={index} className="hover:bg-muted/50 transition-colors">
                <TableCell className={`font-medium ${isDarkMode ? 'text-white' : 'text-black'}`}>{transformation.name}</TableCell>
                <TableCell className={isDarkMode ? 'text-[#A6A6A6]' : 'text-[#4A4A4A]'}>{transformation.dataSource}</TableCell>
                <TableCell>{transformation.apiList}</TableCell>
                <TableCell>{transformation.lastModified}</TableCell>
                <TableCell>
                  <Badge variant={transformation.status === 'Active' ? 'default' : 'secondary'} className={`
  ${transformation.status === 'Active' 
    ? isDarkMode ? 'bg-green-500 text-white' : 'bg-green-100 text-green-800'
    : isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-800'
  }
`}>
                    {transformation.status}
                  </Badge>
                </TableCell>
                <TableCell>
                  <Button variant="outline" size="sm" className={`mr-2 ${
  isDarkMode ? 'text-white hover:bg-[#3A3A4B]' : 'text-black hover:bg-[#E0E0E0]'
}`}>Edit</Button>
                  <Button variant="outline" size="sm" className={
  isDarkMode ? 'text-white hover:bg-[#3A3A4B]' : 'text-black hover:bg-[#E0E0E0]'
}>Delete</Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}


=== ./components/transformations/transformations-header.tsx ===
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

interface TransformationsHeaderProps {
  onAddNew: () => void
}

export function TransformationsHeader({ onAddNew }: TransformationsHeaderProps) {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <div className="flex justify-between items-center mb-6">
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Transformations</h1>
      <Button
        onClick={onAddNew}
        className={`
          ${isDarkMode
            ? 'bg-[#6366F1] hover:bg-[#818CF8] active:bg-[#4F46E5]'
            : 'bg-[#2563EB] hover:bg-[#3B82F6] active:bg-[#1D4ED8]'
          }
          text-white border-none transition-colors duration-200
        `}
      >
        <Plus className="mr-2 h-4 w-4" /> Add New Transformation
      </Button>
    </div>
  )
}


=== ./components/auth/forgot-password-form.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'

export function ForgotPasswordForm() {
  const [email, setEmail] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle forgot password logic here
    console.log('Forgot password request for:', email)
  }

  return (
    <Card className="w-[350px]">
      <CardHeader className="text-center">
        <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">FlowTechs</h2>
        <p className="text-sm text-muted-foreground mt-2">Forgot your password?</p>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
          </div>
          <Button className="mt-4 w-full" type="submit">
            Send reset link
          </Button>
        </form>
      </CardContent>
      <CardFooter>
        <div className="text-sm text-muted-foreground text-center w-full">
          Remember your password?{' '}
          <Link href="/login" className="text-primary hover:underline">
            Log in
          </Link>
        </div>
      </CardFooter>
    </Card>
  )
}


=== ./components/auth/auth-layout.tsx ===
import { ReactNode } from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { useTheme } from "@/components/theme-provider"

interface AuthLayoutProps {
  children: ReactNode
  title: string
  subtitle: string
}

export function AuthLayout({ children, title, subtitle }: AuthLayoutProps) {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-blue-500 to-purple-600 p-4">
      <Card className={`w-full max-w-md ${
        isDarkMode ? 'bg-[#1E1E2D] text-white' : 'bg-white text-black'
      }`}>
        <CardContent className="p-6">
          <h1 className={`text-2xl font-bold mb-2 ${
            isDarkMode ? 'text-white' : 'text-black'
          }`}>
            {title}
          </h1>
          <p className={`text-sm mb-6 ${
            isDarkMode ? 'text-gray-300' : 'text-gray-600'
          }`}>
            {subtitle}
          </p>
          {children}
        </CardContent>
      </Card>
    </div>
  )
}


=== ./components/auth/login-form.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'

export function LoginForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle login logic here
    console.log('Login attempt with:', { email, password })
  }

  return (
    <Card className="w-[350px]">
      <CardHeader className="text-center">
        <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">FlowTechs</h2>
        <p className="text-sm text-muted-foreground mt-2">Log in to your account</p>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
          </div>
          <Button className="mt-4 w-full" type="submit">
            Log in
          </Button>
        </form>
      </CardContent>
      <CardFooter className="flex flex-col space-y-2">
        <Link href="/forgot-password" className="text-sm text-primary hover:underline">
          Forgot your password?
        </Link>
        <div className="text-sm text-muted-foreground">
          Don't have an account?{' '}
          <Link href="/signup" className="text-primary hover:underline">
            Sign up
          </Link>
        </div>
      </CardFooter>
    </Card>
  )
}


=== ./components/auth/signup-form.tsx ===
"use client"

import { useState } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'

export function SignUpForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Handle sign-up logic here
    console.log('Sign-up attempt with:', { email, password, confirmPassword })
  }

  return (
    <Card className="w-[350px]">
      <CardHeader className="text-center">
        <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">FlowTechs</h2>
        <p className="text-sm text-muted-foreground mt-2">Create an account</p>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Create a password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirm-password">Confirm Password</Label>
              <Input
                id="confirm-password"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
          </div>
          <Button className="mt-4 w-full" type="submit">
            Sign up
          </Button>
        </form>
      </CardContent>
      <CardFooter>
        <div className="text-sm text-muted-foreground text-center w-full">
          Already have an account?{' '}
          <Link href="/login" className="text-primary hover:underline">
            Log in
          </Link>
        </div>
      </CardFooter>
    </Card>
  )
}


=== ./components/destinations/destinations-list.tsx ===
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Cloud, Database, FileText, HardDrive, Server } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

const destinations = [
  { name: 'Acquia', icon: Cloud, status: 'Connected' },
  { name: 'Google Drive', icon: FileText, status: 'Connected' },
  { name: 'OneDrive', icon: FileText, status: 'Not Connected' },
  { name: 'Custom FTP/SFTP', icon: Server, status: 'Not Connected' },
  { name: 'Azure SQL DB', icon: Database, status: 'Not Connected' },
  { name: 'Amazon S3', icon: HardDrive, status: 'Not Connected' },
]

export function DestinationsList() {
  const { theme } = useTheme()
  const iconColor = theme === "dark" ? "text-white" : "text-black"

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {destinations.map((destination, index) => (
        <Card key={index} className="transition-all duration-200 hover:shadow-lg">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-600/10">
                  <destination.icon className={`h-6 w-6 ${iconColor}`} />
                </div>
                <div>
                  <h3 className="font-semibold text-lg">{destination.name}</h3>
                  <p className={`text-sm ${destination.status === 'Connected' ? 'text-green-500' : 'text-gray-500'}`}>
                    {destination.status}
                  </p>
                </div>
              </div>
            </div>
            <Button 
              variant={destination.status === 'Connected' ? 'outline' : 'default'} 
              size="sm"
              className="w-full"
            >
              {destination.status === 'Connected' ? 'Disconnect' : 'Connect'}
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}


=== ./components/destinations/add-destination-modal.tsx ===
"use client"

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { useTheme } from 'next-themes'

interface AddDestinationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (destination: any) => void;
  editingDestination: any;
}

export function AddDestinationModal({ isOpen, onClose, onSave, editingDestination }: AddDestinationModalProps) {
  const [name, setName] = useState(editingDestination?.name || '')
  const [type, setType] = useState(editingDestination?.type || '')
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleSave = () => {
    onSave({ name, type })
    setName('')
    setType('')
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={`sm:max-w-[425px] ${
        isDarkMode ? 'bg-[#1E1E2D] text-white border-[#333333]' : 'bg-white text-black border-[#E0E0E0]'
      }`}>
        <DialogHeader className="flex items-center justify-between">
          <DialogTitle className="text-lg font-bold">
            {editingDestination ? "Edit Destination" : "Add New Destination"}
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="name" className={isDarkMode ? 'text-white' : 'text-black'}>Name</Label>
            <Input
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className={`${
                isDarkMode
                  ? 'bg-[#2C2C3B] text-white border-[#3A3A4B] focus:border-[#6366F1] placeholder-[#6C727C]'
                  : 'bg-white text-black border-[#E0E0E0] focus:border-[#1565C0] placeholder-[#BDBDBD]'
              }`}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="type" className={isDarkMode ? 'text-white' : 'text-black'}>Destination Type</Label>
            <Select value={type} onValueChange={setType}>
              <SelectTrigger className={`${
                isDarkMode
                  ? 'bg-[#2C2C3B] text-white border-[#3A3A4B]'
                  : 'bg-white text-black border-[#E0E0E0]'
              }`}>
                <SelectValue placeholder="Select destination type" />
              </SelectTrigger>
              <SelectContent className={
                isDarkMode ? 'bg-[#2C2C3B] text-white border-[#3A3A4B]' : 'bg-white text-black border-[#E0E0E0]'
              }>
                <SelectItem value="FTP/SFTP">FTP/SFTP</SelectItem>
                <SelectItem value="Google Drive">Google Drive</SelectItem>
                <SelectItem value="Microsoft OneDrive">Microsoft OneDrive</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <DialogFooter>
          <Button onClick={onClose} variant="secondary" className={`
            ${isDarkMode 
              ? 'bg-[#2C2C3D] text-white hover:bg-[#3A3A4B]' 
              : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'}
          `}>
            Cancel
          </Button>
          <Button onClick={handleSave} className={`
            ${isDarkMode
              ? 'bg-[#2196F3] text-white hover:bg-[#1E88E5]'
              : 'bg-[#1565C0] text-white hover:bg-[#0D47A1]'}
          `}>
            Save
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}


=== ./components/destinations/destination-card.tsx ===
"use client"

import { useState } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog'
import { MoreVertical, Edit, Trash2 } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface DestinationCardProps {
  destination: {
    id: number;
    name: string;
    type: string;
    isConnected: boolean;
  };
  onEdit: () => void;
  onDelete: () => void;
  onToggleConnection: () => void;
  isDarkMode: boolean;
}

export function DestinationCard({ destination, onEdit, onDelete, onToggleConnection, isDarkMode }: DestinationCardProps) {
  const [showDisconnectDialog, setShowDisconnectDialog] = useState(false)

  const handleToggle = () => {
    if (destination.isConnected) {
      setShowDisconnectDialog(true)
    } else {
      onToggleConnection()
    }
  }

  return (
    <>
      <Card className={`transition-all duration-200 ${
        isDarkMode 
          ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
          : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
      }`}>
        <CardContent className="p-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h3 className={`text-base font-bold ${isDarkMode ? 'text-white' : 'text-black'}`}>
                {destination.name}
              </h3>
              <p className={`text-sm ${isDarkMode ? 'text-[#A6A6A6]' : 'text-[#4A4A4A]'}`}>
                {destination.type}
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <Switch
                checked={destination.isConnected}
                onCheckedChange={handleToggle}
              />
              <span className={`text-sm ${destination.isConnected ? 'text-[#34C759]' : 'text-[#D1D1D6]'}`}>
                {destination.isConnected ? 'Connected' : 'Disconnected'}
              </span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <MoreVertical className={`h-5 w-5 ${isDarkMode ? 'text-white' : 'text-black'}`} />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={onEdit}>
                    <Edit className="mr-2 h-4 w-4" />
                    Edit
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={onDelete}>
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>

      <AlertDialog open={showDisconnectDialog} onOpenChange={setShowDisconnectDialog}>
        <AlertDialogContent className={`${
          isDarkMode ? 'bg-[#1E1E2D] text-white border-[#333333]' : 'bg-white text-black border-[#E0E0E0]'
        }`}>
          <AlertDialogHeader>
            <AlertDialogTitle className="text-lg font-bold">
              Disconnect Destination
            </AlertDialogTitle>
            <AlertDialogDescription className={
              isDarkMode ? 'text-[#A6A6A6]' : 'text-[#4A4A4A]'
            }>
              Are you sure you want to close an open and active connection?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel className={`
              ${isDarkMode 
                ? 'bg-[#2C2C3D] text-white hover:bg-[#3A3A4B]' 
                : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'}
            `}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={() => {
                onToggleConnection()
                setShowDisconnectDialog(false)
              }}
              className={`
                ${isDarkMode
                  ? 'bg-[#2196F3] text-white hover:bg-[#1E88E5]'
                  : 'bg-[#1565C0] text-white hover:bg-[#0D47A1]'}
              `}
            >
              Disconnect
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}


=== ./components/destinations/destinations-header.tsx ===
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

export function DestinationsHeader() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <div className="flex justify-between items-center mb-6">
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">My Destinations</h1>
      <Button
        className={`
          ${isDarkMode
            ? 'bg-[#6366F1] hover:bg-[#818CF8] active:bg-[#4F46E5]'
            : 'bg-[#2563EB] hover:bg-[#3B82F6] active:bg-[#1D4ED8]'
          }
          text-white border-none transition-colors duration-200
        `}
      >
        <Plus className="mr-2 h-4 w-4" /> Add New Destination
      </Button>
    </div>
  )
}


=== ./components/NavbarSimple.tsx ===
"use client"

import { Home, Database, GitBranch, HardDrive, Settings, BarChart, LogOut } from 'lucide-react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import { Button } from "@/components/ui/button"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { ThemeToggle } from "@/components/theme-toggle"
import { cn } from "@/lib/utils"

const navItems = [
  { title: 'Dashboard', icon: Home, href: '/' },
  { title: 'My Sources', icon: Database, href: '/sources' },
  { title: 'Transformation', icon: GitBranch, href: '/transformations' },
  { title: 'My Destinations', icon: HardDrive, href: '/destinations' },
  { title: 'Analytics', icon: BarChart, href: '/analytics' },
  { title: 'Settings', icon: Settings, href: '/settings' },
]

export function NavbarSimple() {
  const pathname = usePathname()

  return (
    <div className="flex h-screen w-16 flex-col justify-between border-r border-border bg-card">
      <div>
        <div className="inline-flex h-16 w-16 items-center justify-center">
          <span className="grid h-10 w-10 place-content-center rounded-lg bg-purple-primary text-white text-xs font-semibold">
            F
          </span>
        </div>

        <div className="border-t border-border">
          <nav aria-label="Main Nav" className="flex flex-col p-2">
            <TooltipProvider>
              {navItems.map((item) => (
                <Tooltip key={item.href}>
                  <TooltipTrigger asChild>
                    <Link
                      href={item.href}
                      className={cn(
                        "group relative flex justify-center rounded-lg p-2 text-muted-foreground hover:bg-purple-primary/10 hover:text-purple-primary transition-colors",
                        pathname === item.href && "bg-purple-primary/10 text-purple-primary"
                      )}
                    >
                      <item.icon className="h-5 w-5" />
                    </Link>
                  </TooltipTrigger>
                  <TooltipContent side="right" className="bg-white border-border">
                    <p>{item.title}</p>
                  </TooltipContent>
                </Tooltip>
              ))}
            </TooltipProvider>
          </nav>
        </div>
      </div>

      <div className="sticky inset-x-0 bottom-0 border-t border-border p-2">
        <div className="flex flex-col gap-2">
          <ThemeToggle />
          <Button 
            variant="ghost" 
            size="icon" 
            className="rounded-lg text-muted-foreground hover:bg-purple-primary/10 hover:text-purple-primary"
          >
            <LogOut className="h-5 w-5" />
          </Button>
        </div>
      </div>
    </div>
  )
}


=== ./components/app-sidebar.tsx ===
"use client"

import { Home, Database, GitBranch, HardDrive, Settings, BarChart } from 'lucide-react'
import { usePathname } from 'next/navigation'
import Link from 'next/link'
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
} from '@/components/ui/sidebar'

const navItems = [
  { title: 'Dashboard', icon: Home, href: '/' },
  { title: 'My Sources', icon: Database, href: '/sources' },
  { title: 'Transformation', icon: GitBranch, href: '/transformations' },
  { title: 'My Destinations', icon: HardDrive, href: '/destinations' },
  { title: 'Analytics', icon: BarChart, href: '/analytics' },
  { title: 'Settings', icon: Settings, href: '/settings' },
]

export function AppSidebar() {
  const pathname = usePathname()

  return (
    <Sidebar className="hidden md:block h-screen">
      <SidebarHeader>
        <h2 className="text-xl font-bold">FlowTechs</h2>
      </SidebarHeader>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupContent>
            <SidebarMenu>
              {navItems.map((item) => (
                <SidebarMenuItem key={item.href}>
                  <SidebarMenuButton asChild isActive={pathname === item.href}>
                    <Link href={item.href}>
                      <item.icon className="mr-2 h-4 w-4" />
                      {item.title}
                    </Link>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
      <SidebarRail />
    </Sidebar>
  )
}


=== ./components/dashboard/recent-jobs.tsx ===
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

const jobs = [
  { source: "Orders", startDate: "2023-11-22", duration: "00:15:30", rowsProcessed: 10345, status: "Success" },
  { source: "Products", startDate: "2023-11-22", duration: "00:10:15", rowsProcessed: 3345, status: "Success" },
  { source: "Customers", startDate: "2023-11-21", duration: "00:12:45", rowsProcessed: 1234, status: "Failed" },
] // TODO: Implement API to fetch actual recent jobs data

export function RecentJobs() {
  return (
    <Card className="transition-all duration-200 hover:shadow-lg">
      <CardHeader>
        <CardTitle className="text-lg font-semibold">Recent Jobs</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Source</TableHead>
              <TableHead>Start Date</TableHead>
              <TableHead>Duration</TableHead>
              <TableHead>Rows Processed</TableHead>
              <TableHead>Status</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {jobs.map((job, index) => (
              <TableRow key={index} className="hover:bg-muted/50 transition-colors">
                <TableCell className="font-medium">{job.source}</TableCell>
                <TableCell>{job.startDate}</TableCell>
                <TableCell>{job.duration}</TableCell>
                <TableCell>{job.rowsProcessed.toLocaleString()}</TableCell>
                <TableCell>
                  <Badge
                    variant={job.status === "Success" ? "success" : "destructive"}
                    className={`rounded-full px-2 py-1 text-xs font-semibold ${
                      job.status === "Success" ? "bg-green-500 text-white" : ""
                    }`}
                  >
                    {job.status}
                  </Badge>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}


=== ./components/dashboard/data-size-chart.tsx ===
"use client"

import { useTheme } from "next-themes"
import { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

const data = [
  { name: "Jan", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Feb", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Mar", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Apr", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "May", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Jun", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Jul", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Aug", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Sep", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Oct", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Nov", total: Math.floor(Math.random() * 5000) + 1000 },
  { name: "Dec", total: Math.floor(Math.random() * 5000) + 1000 },
]

export function DataSizeChart() {
  const { theme } = useTheme()
  const isDark = theme === "dark"

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Data Size</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={data}
              margin={{
                top: 5,
                right: 10,
                left: 10,
                bottom: 0,
              }}
            >
              <XAxis
                dataKey="name"
                stroke={isDark ? "#525252" : "#94a3b8"}
                fontSize={12}
                tickLine={false}
                axisLine={false}
              />
              <YAxis
                stroke={isDark ? "#525252" : "#94a3b8"}
                fontSize={12}
                tickLine={false}
                axisLine={false}
                tickFormatter={(value) => `${value} MB`}
              />
              <Tooltip
                content={({ active, payload, label }) => {
                  if (active && payload && payload.length) {
                    return (
                      <div className={`rounded-lg border p-2 shadow-md ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                        <p className={`text-sm font-medium ${isDark ? 'text-gray-200' : 'text-gray-900'}`}>{label}</p>
                        <p className="text-sm font-semibold text-purple-500">
                          {`${payload[0].value} MB`}
                        </p>
                      </div>
                    )
                  }
                  return null
                }}
              />
              <Line
                type="monotone"
                dataKey="total"
                stroke="rgb(147, 51, 234)"
                strokeWidth={2}
                dot={false}
                activeDot={{
                  r: 4,
                  fill: "rgb(147, 51, 234)",
                  stroke: isDark ? "#1a1a1a" : "#ffffff",
                  strokeWidth: 2,
                }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  )
}


=== ./components/dashboard/dashboard-metrics.tsx ===
"use client"

import { Paper, Typography, Box } from '@mui/material'
import { Line } from 'react-chartjs-2'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Tooltip,
  Legend,
} from 'chart.js'

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Tooltip,
  Legend
)

const data = {
  labels: ['', '', '', '', '', '', ''],
  datasets: [
    {
      data: [65, 59, 80, 81, 56, 55, 40],
      fill: false,
      borderColor: '#4caf50',
      tension: 0.4,
      pointRadius: 0,
    },
  ],
}

const options = {
  responsive: true,
  plugins: {
    legend: {
      display: false,
    },
  },
  scales: {
    x: {
      display: false,
    },
    y: {
      display: false,
    },
  },
  maintainAspectRatio: false,
}

export function DashboardMetrics() {
  return (
    <Paper sx={{ p: 3 }}>
      <Typography variant="h6" gutterBottom>
        Visits Today
      </Typography>
      <Typography variant="h3" sx={{ my: 3 }}>
        12,678
      </Typography>
      <Box sx={{ height: 50 }}>
        <Line data={data} options={options} />
      </Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
        <Box>
          <Typography variant="body2" color="textSecondary">
            Registrations
          </Typography>
          <Typography variant="h6">860</Typography>
        </Box>
        <Box>
          <Typography variant="body2" color="textSecondary">
            Sign Out
          </Typography>
          <Typography variant="h6">32</Typography>
        </Box>
        <Box>
          <Typography variant="body2" color="textSecondary">
            Rate
          </Typography>
          <Typography variant="h6">3.25%</Typography>
        
</Box>
      </Box>
    </Paper>
  )
}


=== ./components/dashboard/daily-line-chart.tsx ===
"use client"

import { Box, Typography, FormControl, Select, MenuItem } from '@mui/material'
import { Line } from 'react-chartjs-2'

const data = {
  labels: Array.from({ length: 31 }, (_, i) => i + 1),
  datasets: [
    {
      label: 'Tablet',
      data: Array.from({ length: 31 }, () => Math.floor(Math.random() * 5000) + 2500),
      borderColor: '#ff9800',
      tension: 0.4,
      pointRadius: 0,
    },
    {
      label: 'Mobile',
      data: Array.from({ length: 31 }, () => Math.floor(Math.random() * 5000) + 2500),
      borderColor: '#2196f3',
      tension: 0.4,
      pointRadius: 0,
    },
  ],
}

const options = {
  responsive: true,
  plugins: {
    legend: {
      position: 'top' as const,
    },
  },
  scales: {
    y: {
      beginAtZero: true,
      max: 7500,
    },
  },
  maintainAspectRatio: false,
}

export function DailyLineChart() {
  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h6">Daily Line Chart</Typography>
        <FormControl size="small">
          <Select
            value="monthly"
            sx={{ minWidth: 120 }}
          >
            <MenuItem value="daily">Daily</MenuItem>
            <MenuItem value="weekly">Weekly</MenuItem>
            <MenuItem value="monthly">Monthly</MenuItem>
          </Select>
        </FormControl>
      </Box>
      <Box sx={{ height: 400 }}>
        <Line data={data} options={options} />
      </Box>
    </Box>
  )
}


=== ./components/dashboard/dashboard-overview.tsx ===
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

export function DashboardOverview() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <Card className="overflow-hidden shadow-card">
        <CardHeader className="bg-purple-primary/10 flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Total Users</CardTitle>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            className="h-4 w-4 text-purple-primary"
          >
            <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
            <circle cx="9" cy="7" r="4" />
            <path d="M22 21v-2a4 4 0 0 0-3-3.87M16 3.13a4 4 0 0 1 0 7.75" />
          </svg>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="text-2xl font-bold text-purple-primary">10,234</div>
          <p className="text-xs text-muted-foreground mt-2">
            +20.1% from last month
          </p>
        </CardContent>
      </Card>
      <Card className="overflow-hidden shadow-card">
        <CardHeader className="bg-orange-soft/30 flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Event Count</CardTitle>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            className="h-4 w-4 text-orange-500"
          >
            <rect width="20" height="14" x="2" y="5" rx="2" />
            <path d="M2 10h20" />
          </svg>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="text-2xl font-bold text-orange-500">536</div>
          <p className="text-xs text-muted-foreground mt-2">
            +19% from last month
          </p>
        </CardContent>
      </Card>
      <Card className="overflow-hidden shadow-card">
        <CardHeader className="bg-green-mint/50 flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">Conversations</CardTitle>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            className="h-4 w-4 text-green-500"
          >
            <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
          </svg>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="text-2xl font-bold text-green-500">21</div>
          <p className="text-xs text-muted-foreground mt-2">
            +201 since last hour
          </p>
        </CardContent>
      </Card>
      <Card className="overflow-hidden shadow-card">
        <CardHeader className="bg-blue-light/30 flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-sm font-medium">New Users</CardTitle>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            className="h-4 w-4 text-blue-500"
          >
            <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
          </svg>
        </CardHeader>
        <CardContent className="pt-6">
          <div className="text-2xl font-bold text-blue-500">3321</div>
          <p className="text-xs text-muted-foreground mt-2">
            +180.1% from last month
          </p>
        </CardContent>
      </Card>
    </div>
  )
}


=== ./components/dashboard/dashboard-header.tsx ===
export function DashboardHeader() {
  return (
    <div className="mb-6">
      <h1 className="text-3xl font-bold">Dashboard</h1>
    </div>
  )
}


=== ./components/dashboard/metric-cards.tsx ===
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Activity, Database, Clock, Upload } from 'lucide-react'

const metrics = [
  { title: "Service Uptime", value: "99.8%", description: "Last 24 hours", icon: Activity, color: "text-green-500" }, // TODO: Implement API to fetch real-time service uptime
  { title: "New Data Rows", value: "10,345", description: "Rows pulled from Shopify", icon: Database, color: "text-blue-500" }, // TODO: Implement API to fetch actual data row count from Shopify
  { title: "Pull Duration", value: "00:15:30", description: "Last pull", icon: Clock, color: "text-yellow-500" }, // TODO: Implement API to fetch actual duration of the last data pull
  { title: "Upload Status", value: "85%", description: "Uploaded successfully", icon: Upload, color: "text-purple-500" }, // TODO: Implement API to fetch real-time upload status
]

export function MetricCards() {
  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      {metrics.map((metric, index) => (
        <Card key={index}>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              {metric.title}
            </CardTitle>
            <metric.icon className={`h-4 w-4 ${metric.color}`} />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{metric.value}</div>
            <p className="text-xs text-muted-foreground mt-2">
              {metric.description}
            </p>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}


=== ./components/dashboard/scheduled-apis.tsx ===
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'

const scheduledApis = [
  { source: 'Shop', date: '2018/12/12', lastRun: '2023/11/22', lastDate: '2023/11/22' },
  { source: 'Orders', date: '2018/12/12', lastRun: '2023/11/22', lastDate: '2023/11/22' },
]

export function ScheduledApis() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Scheduled APIs</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Source</TableHead>
              <TableHead>Date</TableHead>
              <TableHead>Last Run</TableHead>
              <TableHead>Last Date</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {scheduledApis.map((api, index) => (
              <TableRow key={index}>
                <TableCell>{api.source}</TableCell>
                <TableCell>{api.date}</TableCell>
                <TableCell>{api.lastRun}</TableCell>
                <TableCell>{api.lastDate}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}


=== ./components/header-bar.tsx ===
"use client"

import { Bell, Settings, LogOut } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { ThemeToggle } from '@/components/theme-toggle'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from '@/components/theme-provider'
import Link from 'next/link'

export function HeaderBar() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <header className={`sticky top-0 z-40 w-full border-b ${
      isDarkMode ? 'bg-[#1E1E2D] border-[#333333]' : 'bg-white border-[#E0E0E0]'
    }`}>
      <div className="container flex h-16 items-center justify-between px-4">
        <div className="flex-1" />
        <nav className="flex items-center space-x-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="relative">
                <Bell className={`h-5 w-5 ${isDarkMode ? 'text-white' : 'text-black'}`} />
                <span className="sr-only">Notifications</span>
                <div className="absolute top-0 right-0 h-2 w-2 rounded-full bg-[#FF3B30]"></div>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Notifications</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>New update available</DropdownMenuItem>
              <DropdownMenuItem>Your export is ready</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link href="/settings">Profile</Link>
              </DropdownMenuItem>
              <DropdownMenuItem>Logout</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <Link href="/settings">
            <Button variant="ghost" size="icon">
              <Settings className={`h-5 w-5 ${isDarkMode ? 'text-white' : 'text-black'}`} />
              <span className="sr-only">Settings</span>
            </Button>
          </Link>
          <ThemeToggle />
          <Button
            variant="ghost"
            size="icon"
            className={`${
              isDarkMode
                ? 'bg-[#2C2C3D] text-white hover:bg-[#3A3A4B]'
                : 'bg-[#E0E0E0] text-black hover:bg-[#BDBDBD]'
            }`}
          >
            <LogOut className="h-5 w-5" />
            <span className="sr-only">Logout</span>
          </Button>
        </nav>
      </div>
    </header>
  )
}


=== ./components/sources/add-source-button.tsx ===
import { Button } from "@/components/ui/button"
import { Plus } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

interface AddSourceButtonProps {
  onClick: () => void;
}

export function AddSourceButton({ onClick }: AddSourceButtonProps) {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <Button 
      onClick={onClick}
      className={`
        ${isDarkMode
          ? 'bg-[#6366F1] hover:bg-[#818CF8] active:bg-[#4F46E5]'
          : 'bg-[#2563EB] hover:bg-[#3B82F6] active:bg-[#1D4ED8]'
        }
        text-white border-none transition-colors duration-200
      `}
    >
      <Plus className="mr-2 h-4 w-4" /> Add New Source
    </Button>
  )
}


=== ./components/sources/connection-modal.tsx ===
"use client"

import { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"

interface ConnectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: any) => void;
  initialData?: {
    id?: number;
    storeName: string;
    url: string;
    apiKey: string;
    apiSecret: string;
    status: "Active" | "Inactive";
  } | null;
}

export function ConnectionModal({ isOpen, onClose, onSave, initialData }: ConnectionModalProps) {
  const [open, setOpen] = useState(isOpen)
  const [url, setUrl] = useState(initialData?.url || "")
  const [apiKey, setApiKey] = useState(initialData?.apiKey || "")
  const [apiSecret, setApiSecret] = useState(initialData?.apiSecret || "")
  const [storeName, setStoreName] = useState(initialData?.storeName || "")
  const [showConfirmDialog, setShowConfirmDialog] = useState(false)

  useEffect(() => {
    setOpen(isOpen)
    if (isOpen && initialData) {
      setUrl(initialData.url)
      setApiKey(initialData.apiKey)
      setApiSecret(initialData.apiSecret)
      setStoreName(initialData.storeName)
    } else {
      setUrl("")
      setApiKey("")
      setApiSecret("")
      setStoreName("")
    }
  }, [isOpen, initialData])

  const handleSave = () => {
    onSave({ storeName, url, apiKey, apiSecret, status: initialData?.status || "Active" })
    handleClose()
  }

  const handleClose = () => {
    if (hasChanges()) {
      setShowConfirmDialog(true)
    } else {
      setOpen(false)
      onClose()
    }
  }

  const confirmClose = () => {
    setShowConfirmDialog(false)
    setOpen(false)
    onClose()
  }

  const hasChanges = () => {
    return (
      url !== (initialData?.url || "") ||
      apiKey !== (initialData?.apiKey || "") ||
      apiSecret !== (initialData?.apiSecret || "") ||
      storeName !== (initialData?.storeName || "")
    )
  }

  return (
    <>
      <Dialog open={open} onOpenChange={handleClose}>
        <DialogContent className="bg-[#1E1E2F] text-white shadow-lg">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold">{initialData ? "Edit Connection" : "Add New Connection"}</DialogTitle>
            <DialogDescription className="text-[#AAB2BF]">
              {initialData ? "Modify your connection details below." : "Enter your connection details below."}
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="storeName" className="text-right text-[#AAB2BF]">
                Store Name
              </Label>
              <Input
                id="storeName"
                value={storeName}
                onChange={(e) => setStoreName(e.target.value)}
                placeholder="Your Store Name"
                className="col-span-3 bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="url" className="text-right text-[#AAB2BF]">
                Store URL
              </Label>
              <Input
                id="url"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                placeholder="https://your-store.myshopify.com"
                className="col-span-3 bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="apiKey" className="text-right text-[#AAB2BF]">
                API Key
              </Label>
              <Input
                id="apiKey"
                type="password"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                placeholder="Your API Key"
                className="col-span-3 bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="apiSecret" className="text-right text-[#AAB2BF]">
                API Secret
              </Label>
              <Input
                id="apiSecret"
                type="password"
                value={apiSecret}
                onChange={(e) => setApiSecret(e.target.value)}
                placeholder="Your API Secret"
                className="col-span-3 bg-[#2C2C3B] text-[#E4E7EB] border-[#3A3F4B] focus:border-[#6366F1] placeholder-[#6C727C]"
              />
            </div>
          </div>
          <DialogFooter>
            <Button 
              onClick={handleSave} 
              className="bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]"
            >
              Save
            </Button>
            <Button 
              variant="outline" 
              onClick={handleClose}
              className="bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]"
            >
              Close
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent className="bg-[#1E1E2F] text-white">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-xl font-semibold">Unsaved Changes</AlertDialogTitle>
            <AlertDialogDescription className="text-[#AAB2BF]">
              You have unsaved changes. Are you sure you want to close without saving?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setShowConfirmDialog(false)} className="bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]">
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={confirmClose} className="bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]">
              Don't Save
            </AlertDialogAction>
            <Button onClick={handleSave} className="bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]">
              Save
            </Button>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}


=== ./components/sources/sources-list.tsx ===
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { ShoppingCart, Box, Edit } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

const sources = [
  { name: 'Shopify', icon: ShoppingCart, status: 'Active' },
  { name: 'Amazon', icon: Box, status: 'Active' },
]

export function SourcesList() {
  const { theme } = useTheme()
  const iconColor = theme === "dark" ? "text-white" : "text-black"

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {sources.map((source, index) => (
        <Card key={index} className="transition-all duration-200 hover:shadow-lg">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500/10 to-purple-600/10">
                  <source.icon className={`h-6 w-6 ${iconColor}`} />
                </div>
                <div>
                  <h3 className="font-semibold text-lg">{source.name}</h3>
                  <p className="text-sm text-green-500">{source.status}</p>
                </div>
              </div>
            </div>
            <Button variant="outline" size="sm" className="w-full">
              <Edit className={`mr-2 h-4 w-4 ${iconColor}`} /> Edit
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}


=== ./components/sources/connection-card.tsx ===
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Edit } from 'lucide-react'

interface ConnectionCardProps {
  id: number;
  storeName: string;
  status: "Active" | "Inactive";
  url: string;
  onEdit: (id: number) => void;
  isDarkMode: boolean;
}

export function ConnectionCard({ id, storeName, status, url, onEdit, isDarkMode }: ConnectionCardProps) {
  return (
    <Card className={`transition-all duration-200 hover:shadow-lg ${
  isDarkMode 
    ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
    : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
}`}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className={`text-base font-bold ${isDarkMode ? 'text-white' : 'text-black'}`}>{storeName}</CardTitle>
        <Badge 
          variant={status === "Active" ? "default" : "secondary"}
          className={`${
    status === "Active" 
      ? isDarkMode ? "bg-green-500 text-white" : "bg-green-100 text-green-800"
      : isDarkMode ? "bg-gray-700 text-gray-300" : "bg-gray-200 text-gray-800"
  }`}
        >
          {status}
        </Badge>
      </CardHeader>
      <CardContent>
        <p className={`text-sm ${isDarkMode ? 'text-[#A6A6A6]' : 'text-[#4A4A4A]'}`}>{url}</p>
        <Button variant="outline" size="sm" className={`w-full ${
  isDarkMode 
    ? 'text-white hover:bg-[#3A3A4B]' 
    : 'text-black hover:bg-[#E0E0E0]'
}`} onClick={() => onEdit(id)}>
          <Edit className="mr-2 h-4 w-4" /> Edit
        </Button>
      </CardContent>
    </Card>
  )
}


=== ./components/sources/add-source-modal.tsx ===
"use client"

import { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'

const SHOPIFY_APIS = [
  { id: 'customers', label: 'Customers' },
  { id: 'orders', label: 'Orders' },
  { id: 'products', label: 'Products' },
  { id: 'inventory', label: 'Inventory' },
]

export function AddSourceModal({ isOpen, onClose, editingSource }: { isOpen: boolean; onClose: () => void; editingSource: string | null }) {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    secretKey: '',
    storeName: '',
    connectionName: '',
    selectedApis: [] as string[],
  })

  useEffect(() => {
    if (editingSource) {
      // Here you would typically fetch the existing data for the source being edited
      // For now, we'll just set some dummy data
      setFormData({
        secretKey: 'existing-secret-key',
        storeName: editingSource,
        connectionName: `${editingSource} Connection`,
        selectedApis: ['customers', 'orders'],
      })
    } else {
      // Reset form when adding a new source
      setFormData({
        secretKey: '',
        storeName: '',
        connectionName: '',
        selectedApis: [],
      })
    }
    setStep(1)
  }, [editingSource])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const handleApiToggle = (apiId: string) => {
    setFormData(prev => ({
      ...prev,
      selectedApis: prev.selectedApis.includes(apiId)
        ? prev.selectedApis.filter(id => id !== apiId)
        : [...prev.selectedApis, apiId]
    }))
  }

  const handleNext = () => {
    if (step < 2) setStep(step + 1)
  }

  const handleBack = () => {
    if (step > 1) setStep(step - 1)
  }

  const handleSubmit = () => {
    console.log('Submitting:', formData)
    // Here you would typically send the data to your backend
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{editingSource ? `Edit ${editingSource} Source` : 'Add New Shopify Source'}</DialogTitle>
        </DialogHeader>
        {step === 1 && (
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="secretKey" className="text-right">
                Secret Key
              </Label>
              <Input
                id="secretKey"
                name="secretKey"
                value={formData.secretKey}
                onChange={handleInputChange}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="storeName" className="text-right">
                Store Name
              </Label>
              <Input
                id="storeName"
                name="storeName"
                value={formData.storeName}
                onChange={handleInputChange}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="connectionName" className="text-right">
                Connection Name
              </Label>
              <Input
                id="connectionName"
                name="connectionName"
                value={formData.connectionName}
                onChange={handleInputChange}
                className="col-span-3"
              />
            </div>
          </div>
        )}
        {step === 2 && (
          <div className="grid gap-4 py-4">
            <Label>Select APIs to use:</Label>
            {SHOPIFY_APIS.map((api) => (
              <div key={api.id} className="flex items-center space-x-2">
                <Checkbox
                  id={api.id}
                  checked={formData.selectedApis.includes(api.id)}
                  onCheckedChange={() => handleApiToggle(api.id)}
                />
                <Label htmlFor={api.id}>{api.label}</Label>
              </div>
            ))}
          </div>
        )}
        <div className="flex justify-between mt-4">
          {step > 1 && (
            <Button onClick={handleBack}>Back</Button>
          )}
          {step < 2 ? (
            <Button onClick={handleNext}>Next</Button>
          ) : (
            <Button onClick={handleSubmit}>{editingSource ? 'Update' : 'Submit'}</Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}


=== ./components/sources/sources-header.tsx ===
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'

export function SourcesHeader() {
  return (
    <div className="flex justify-between items-center mb-6">
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">My Sources</h1>
      <Button>
        <Plus className="mr-2 h-4 w-4" /> Add New Source
      </Button>
    </div>
  )
}


=== ./components/jobs/recent-jobs.tsx ===
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

const jobs = [
  { source: "Orders", startDate: "2023-11-22", duration: "00:15:30", rowsProcessed: 10345, status: "Success" },
  { source: "Products", startDate: "2023-11-22", duration: "00:10:15", rowsProcessed: 3345, status: "Success" },
  { source: "Customers", startDate: "2023-11-21", duration: "00:12:45", rowsProcessed: 1234, status: "Failed" },
] // TODO: Implement API to fetch actual recent jobs data

export function RecentJobs() {
  return (
    <Card className="transition-all duration-200 hover:shadow-lg">
      <CardHeader>
        <CardTitle className="text-lg font-semibold">Recent Jobs</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Source</TableHead>
              <TableHead>Start Date</TableHead>
              <TableHead>Duration</TableHead>
              <TableHead>Rows Processed</TableHead>
              <TableHead>Status</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {jobs.map((job, index) => (
              <TableRow key={index} className="hover:bg-muted/50 transition-colors">
                <TableCell className="font-medium">{job.source}</TableCell>
                <TableCell>{job.startDate}</TableCell>
                <TableCell>{job.duration}</TableCell>
                <TableCell>{job.rowsProcessed.toLocaleString()}</TableCell>
                <TableCell>
                  <Badge
                    variant={job.status === "Success" ? "success" : "destructive"}
                    className={`rounded-full px-2 py-1 text-xs font-semibold ${
                      job.status === "Success" ? "bg-green-500 text-white" : ""
                    }`}
                  >
                    {job.status}
                  </Badge>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}


=== ./components/jobs/add-job-modal.tsx ===
"use client"

import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { Switch } from '@/components/ui/switch'
import { useTheme } from 'next-themes'

interface AddJobModalProps {
  isOpen: boolean
  onClose: () => void
}

export function AddJobModal({ isOpen, onClose }: AddJobModalProps) {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    source: '',
    transformation: '',
    destination: '',
    schedule: {
      isRecurring: false,
      interval: '',
      option: '',
    },
  })
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  const handleNext = () => {
    if (step < 4) setStep(step + 1)
  }

  const handleBack = () => {
    if (step > 1) setStep(step - 1)
  }

  const handleSubmit = () => {
    console.log('Submitting:', formData)
    // Here you would typically send the data to your backend
    onClose()
  }

  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-4">
            <p className={`text-sm ${isDarkMode ? 'text-white' : 'text-black'}`}>
              To create a job, specify which Load & Transformation from a source should be sent to a destination. Finally, set whether the job will run once or on a recurring schedule.
            </p>
            <div className="space-y-2">
              <Label htmlFor="source">Select Source</Label>
              <Select onValueChange={(value) => setFormData({ ...formData, source: value })}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a source" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="shopify">Shopify (E-Commerce)</SelectItem>
                  <SelectItem value="amazon">Amazon (Retail)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )
      case 2:
        return (
          <div className="space-y-4">
            <Label>Select Transformation</Label>
            <RadioGroup onValueChange={(value) => setFormData({ ...formData, transformation: value })}>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="transform1" id="transform1" />
                <Label htmlFor="transform1">Transformation 1</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="transform2" id="transform2" />
                <Label htmlFor="transform2">Transformation 2</Label>
              </div>
            </RadioGroup>
          </div>
        )
      case 3:
        return (
          <div className="space-y-4">
            <Label htmlFor="destination">Select Destination</Label>
            <Select onValueChange={(value) => setFormData({ ...formData, destination: value })}>
              <SelectTrigger>
                <SelectValue placeholder="Select a destination" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="google-drive">Google Drive</SelectItem>
                <SelectItem value="ftp">FTP/SFTP</SelectItem>
              </SelectContent>
            </Select>
          </div>
        )
      case 4:
        return (
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="recurring"
                checked={formData.schedule.isRecurring}
                onCheckedChange={(checked) => setFormData({
                  ...formData,
                  schedule: { ...formData.schedule, isRecurring: checked }
                })}
              />
              <Label htmlFor="recurring">Recurring Job</Label>
            </div>
            {formData.schedule.isRecurring ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="interval">Recurring Interval</Label>
                  <Select onValueChange={(value) => setFormData({
                    ...formData,
                    schedule: { ...formData.schedule, interval: value }
                  })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select interval" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                      <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="option">Recurring Option</Label>
                  <Select onValueChange={(value) => setFormData({
                    ...formData,
                    schedule: { ...formData.schedule, option: value }
                  })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select option" />
                    </SelectTrigger>
                    <SelectContent>
                      {formData.schedule.interval === 'daily' && (
                        Array.from({ length: 24 }, (_, i) => (
                          <SelectItem key={i} value={`${i.toString().padStart(2, '0')}:00`}>
                            {`${i.toString().padStart(2, '0')}:00`}
                          </SelectItem>
                        ))
                      )}
                      {formData.schedule.interval === 'weekly' && (
                        ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
                          <SelectItem key={day} value={day.toLowerCase()}>{day}</SelectItem>
                        ))
                      )}
                      {formData.schedule.interval === 'monthly' && (
                        <>
                          {Array.from({ length: 31 }, (_, i) => (
                            <SelectItem key={i} value={(i + 1).toString()}>
                              {(i + 1).toString()}
                            </SelectItem>
                          ))}
                          <SelectItem value="last">Last day of each month</SelectItem>
                        </>
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            ) : (
              <p className={`text-sm ${isDarkMode ? 'text-white' : 'text-black'}`}>
                This job will run once.
              </p>
            )}
          </div>
        )
      default:
        return null
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={`sm:max-w-[425px] ${isDarkMode ? 'bg-[#1E1E2D] text-white' : 'bg-white text-gray-900'}`}>
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold">
            Add New Job - Step {step} of 4
          </DialogTitle>
        </DialogHeader>
        {renderStepContent()}
        <DialogFooter>
          {step > 1 && (
            <Button onClick={handleBack} variant="outline" className={isDarkMode
              ? 'bg-[#374151] text-[#D1D5DB] hover:bg-[#4B5563] active:bg-[#1F2937]'
              : 'bg-gray-100 text-gray-800 hover:bg-gray-200 active:bg-gray-300'
            }>
              Back
            </Button>
          )}
          {step < 4 ? (
            <Button onClick={handleNext} className={isDarkMode
              ? 'bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]'
              : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800'
            }>
              Next
            </Button>
          ) : (
            <Button onClick={handleSubmit} className={isDarkMode
              ? 'bg-[#6366F1] text-white hover:bg-[#818CF8] active:bg-[#4F46E5]'
              : 'bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800'
            }>
              Create Job
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}


=== ./components/theme-toggle.tsx ===
"use client"

import * as React from "react"
import { Moon, Sun } from 'lucide-react'
import { useTheme } from "@/components/theme-provider"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const isDarkMode = theme === "dark"

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon" className="h-10 w-10">
          <Sun className={`h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0 ${isDarkMode ? 'text-white' : 'text-black'}`} />
          <Moon className={`absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100 ${isDarkMode ? 'text-white' : 'text-black'}`} />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}


=== ./components/analytics/analytics-content.tsx ===
"use client"

import { AnalyticsHeader } from '@/components/analytics/analytics-header'
import { ETLReport } from '@/components/analytics/etl-report'
import { Graphs } from '@/components/analytics/graphs'
import { DataChart } from '@/components/analytics/data-chart'
import { useTheme } from 'next-themes'

export function AnalyticsContent() {
  const { theme } = useTheme()
  const isDarkMode = theme === 'dark'

  return (
    <>
      <AnalyticsHeader />
      <div className="grid gap-6 grid-cols-1 md:grid-cols-3">
        <ETLReport />
        <Graphs />
        <DataChart />
      </div>
    </>
  )
}


=== ./components/analytics/analytics-header.tsx ===
export function AnalyticsHeader() {
  return (
    <div className="mb-6">
      <h1 className="text-3xl font-bold tracking-tight bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">Analytics</h1>
    </div>
  )
}


=== ./components/analytics/graphs.tsx ===
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"
import { useTheme } from "next-themes"

const dataPullFrequency = [
  { time: "10:00", rows: 5000 },
  { time: "11:00", rows: 7500 },
  { time: "12:00", rows: 10345 },
  { time: "13:00", rows: 8000 },
  { time: "14:00", rows: 9500 },
]

const uploadSuccessRates = [
  { time: "10:00", rate: 95 },
  { time: "11:00", rate: 98 },
  { time: "12:00", rate: 85 },
  { time: "13:00", rate: 92 },
  { time: "14:00", rate: 97 },
]

export function Graphs() {
  const { theme } = useTheme()
  const isDark = theme === "dark"

  return (
    <Card className="transition-all duration-200 hover:shadow-lg">
      <CardHeader>
        <CardTitle className="text-lg font-semibold">Data Pull Frequency</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={150}>
          <LineChart data={dataPullFrequency}>
            <XAxis 
              dataKey="time" 
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                borderColor: isDark ? '#374151' : '#E5E7EB',
                color: isDark ? '#F3F4F6' : '#111827'
              }}
            />
            <Line
              type="monotone"
              dataKey="rows"
              stroke={isDark ? "#60A5FA" : "#3B82F6"}
              strokeWidth={2}
              dot={false}
            />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
      <CardHeader>
        <CardTitle className="text-lg font-semibold">Upload Success Rates</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={150}>
          <LineChart data={uploadSuccessRates}>
            <XAxis 
              dataKey="time" 
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value}%`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                borderColor: isDark ? '#374151' : '#E5E7EB',
                color: isDark ? '#F3F4F6' : '#111827'
              }}
            />
            <Line
              type="monotone"
              dataKey="rate"
              stroke={isDark ? "#60A5FA" : "#22c55e"}
              strokeWidth={2}
              dot={false}
            />
          </LineChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}


=== ./components/analytics/data-chart.tsx ===
"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Bar, BarChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"
import { useTheme } from "next-themes"

const data = [
  { name: "Jan", total: 2400 },
  { name: "Feb", total: 1398 },
  { name: "Mar", total: 9800 },
  { name: "Apr", total: 3908 },
  { name: "May", total: 4800 },
  { name: "Jun", total: 3800 },
]

export function DataChart() {
  const { theme } = useTheme()
  const isDark = theme === "dark"

  return (
    <Card className={`w-full ${
      isDark 
        ? 'bg-[#2C2C3D] border-[#333333]' 
        : 'bg-white border-[#E0E0E0]'
    }`}>
      <CardHeader>
        <CardTitle>Data Size</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart
            data={data}
            margin={{
              top: 5,
              right: 10,
              left: 10,
              bottom: 20,
            }}
          >
            <XAxis
              dataKey="name"
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
            />
            <YAxis
              stroke={isDark ? "#888888" : "#222222"}
              fontSize={12}
              tickLine={false}
              axisLine={false}
              tickFormatter={(value) => `${value} MB`}
            />
            <Tooltip
              contentStyle={{
                backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                borderColor: isDark ? '#374151' : '#E5E7EB',
                color: isDark ? '#F3F4F6' : '#111827'
              }}
            />
            <Bar
              dataKey="total"
              fill={isDark ? "#60A5FA" : "#3B82F6"}
              radius={[4, 4, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}


=== ./components/analytics/etl-report.tsx ===
"use client"

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts'
import { useTheme } from "next-themes"

const etlData = [
  { name: 'Extract', value: 120 },
  { name: 'Transform', value: 80 },
  { name: 'Load', value: 100 },
]

const COLORS = ['#0088FE', '#00C49F', '#FFBB28']

export function ETLReport() {
  const { theme } = useTheme()
  const isDarkMode = theme === "dark"

  return (
    <Card className={`${
      isDarkMode 
        ? 'bg-[#2C2C3D] border-[#333333]' 
        : 'bg-white border-[#E0E0E0]'
    }`}>
      <CardHeader>
        <CardTitle className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-black'}`}>Recent ETL Analysis</CardTitle>
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={etlData}
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={80}
              fill="#8884d8"
              paddingAngle={5}
              dataKey="value"
            >
              {etlData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip
              contentStyle={{
                backgroundColor: isDarkMode ? '#1F2937' : '#FFFFFF',
                borderColor: isDarkMode ? '#374151' : '#E5E7EB',
                color: isDarkMode ? '#F3F4F6' : '#111827'
              }}
            />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}


=== ./components/analytics/job-performance.tsx ===
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"

const recentJobs = [
  { id: 1, name: "Job 1", status: "Completed", duration: "10 days", records: 100 },
  { id: 2, name: "Job 2", status: "In Progress", duration: "5 days", records: 50 },
  { id: 3, name: "Job 3", status: "Pending", duration: "2 days", records: 20 },
]

export function JobPerformance({isDarkMode}: {isDarkMode: boolean}) {
  return (
    <Card className={`transition-all duration-200 hover:shadow-lg ${
  isDarkMode 
    ? 'bg-[#2C2C3D] border-[#333333] hover:shadow-[inset_0_0_6px_rgba(58,58,75,0.2)]' 
    : 'bg-white border-[#E0E0E0] hover:shadow-[0_0_8px_rgba(0,0,0,0.1)]'
}`}>
      <CardHeader>
        <CardTitle className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-black'}`}>Recent Jobs</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Job Name</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Duration</TableHead>
              <TableHead>Records</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {recentJobs.map((job) => (
              <TableRow key={job.id} className="hover:bg-muted/50 transition-colors">
                <TableCell className={`font-medium ${isDarkMode ? 'text-white' : 'text-black'}`}>{job.name}</TableCell>
                <TableCell>
                  <Badge
                    variant={
                      job.status === "Completed"
                        ? "default"
                        : job.status === "In Progress"
                        ? "secondary"
                        : "destructive"
                    }
                    className={`
    ${job.status === "Completed"
      ? isDarkMode ? "bg-green-500 text-white" : "bg-green-100 text-green-800"
      : job.status === "In Progress"
      ? isDarkMode ? "bg-blue-500 text-white" : "bg-blue-100 text-blue-800"
      : isDarkMode ? "bg-red-500 text-white" : "bg-red-100 text-red-800"
    }
  `}
                  >
                    {job.status}
                  </Badge>
                </TableCell>
                <TableCell>{job.duration}</TableCell>
                <TableCell>{job.records}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}


=== ./package.json ===
{
  "dependencies": {
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.244.0",
    "next": "latest",
    "react": "latest",
    "react-dom": "latest",
    "recharts": "^2.7.2",
    "tailwindcss-animate": "^1.0.6"
  }
}


=== ./theme.ts ===
import { createTheme } from '@mui/material/styles';

export const theme = createTheme({
  palette: {
    primary: {
      main: '#3f51b5',
      light: '#757de8',
      dark: '#002984',
    },
    secondary: {
      main: '#ff4081',
      light: '#ff79b0',
      dark: '#c60055',
    },
    background: {
      default: '#f5f5f5',
      paper: '#ffffff',
    },
  },
  components: {
    MuiAppBar: {
      styleOverrides: {
        root: {
          backgroundColor: '#3f51b5',
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          backgroundColor: '#ffffff',
          borderRight: '1px solid rgba(0, 0, 0, 0.12)',
        },
      },
    },
  },
});

